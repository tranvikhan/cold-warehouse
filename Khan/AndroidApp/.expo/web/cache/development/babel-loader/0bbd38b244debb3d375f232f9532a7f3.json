{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { loadTextureAsync } from \"./loaders/loadTextureAsync\";\nimport THREE from \"./Three\";\nimport parseAssetCallback from \"./loaders/parseAssetCallback\";\nexport function loadTexture(url, onLoad, onProgress, onError) {\n  var _this = this;\n\n  var texture = new THREE.Texture();\n\n  if (typeof this.path === 'function' || this.path !== null && typeof this.path === 'object') {\n    (function _callee() {\n      var asset, _await$loadTextureAsy, minFilter, image;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = url.split('/').pop();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(parseAssetCallback(url, _this.path));\n\n            case 3:\n              asset = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(loadTextureAsync({\n                asset: asset\n              }));\n\n            case 6:\n              _await$loadTextureAsy = _context.sent;\n              minFilter = _await$loadTextureAsy.minFilter;\n              image = _await$loadTextureAsy.image;\n              texture.image = image;\n              texture.needsUpdate = true;\n              texture['isDataTexture'] = true;\n              texture.minFilter = minFilter;\n\n              if (onLoad !== undefined) {\n                console.warn('loaded tex', texture);\n                onLoad(texture);\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }\n\n  return texture;\n}","map":{"version":3,"sources":["../src/loadTexture.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT;AACA,OAAO,KAAP;AACA,OAAO,kBAAP;AAEA,OAAM,SAAU,WAAV,CAAsB,GAAtB,EAA2B,MAA3B,EAAmC,UAAnC,EAA+C,OAA/C,EAAsD;AAAA;;AAC1D,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,OAAV,EAAhB;;AACA,MAEE,OAAO,KAAK,IAAZ,KAAqB,UAArB,IAEC,KAAK,IAAL,KAAc,IAAd,IAAsB,OAAO,KAAK,IAAZ,KAAqB,QAJ9C,EAKE;AACA,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACC,cAAA,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAN;AADD;AAAA,+CAGqB,kBAAkB,CAAC,GAAD,EAAM,KAAI,CAAC,IAAX,CAHvC;;AAAA;AAGO,cAAA,KAHP;AAAA;AAAA,+CAIoC,gBAAgB,CAAC;AAAE,gBAAA,KAAK,EAAL;AAAF,eAAD,CAJpD;;AAAA;AAAA;AAIS,cAAA,SAJT,yBAIS,SAJT;AAIoB,cAAA,KAJpB,yBAIoB,KAJpB;AAKC,cAAA,OAAO,CAAC,KAAR,GAAgB,KAAhB;AACA,cAAA,OAAO,CAAC,WAAR,GAAsB,IAAtB;AACA,cAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,IAA3B;AACA,cAAA,OAAO,CAAC,SAAR,GAAoB,SAApB;;AAEA,kBAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,gBAAA,OAAO,CAAC,IAAR,CAAa,YAAb,EAA2B,OAA3B;AACA,gBAAA,MAAM,CAAC,OAAD,CAAN;AACD;;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAeD;;AAED,SAAO,OAAP;AACD","sourcesContent":["import { loadTextureAsync } from './loaders/loadTextureAsync';\nimport THREE from './Three';\nimport parseAssetCallback from './loaders/parseAssetCallback';\n\nexport function loadTexture(url, onLoad, onProgress, onError) {\n  const texture = new THREE.Texture();\n  if (\n    // @ts-ignore\n    typeof this.path === 'function' ||\n    // @ts-ignore\n    (this.path !== null && typeof this.path === 'object')\n  ) {\n    (async () => {\n      url = url.split('/').pop();\n      // @ts-ignore\n      const asset = await parseAssetCallback(url, this.path);\n      const { minFilter, image } = await loadTextureAsync({ asset });\n      texture.image = image;\n      texture.needsUpdate = true;\n      texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\n      texture.minFilter = minFilter; // Pass-through non-power-of-two\n\n      if (onLoad !== undefined) {\n        console.warn('loaded tex', texture);\n        onLoad(texture);\n      }\n    })();\n  }\n\n  return texture;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}