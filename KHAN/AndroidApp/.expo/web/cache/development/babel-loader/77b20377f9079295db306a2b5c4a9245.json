{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\GIT HUB\\\\NCKH2020\\\\KHAN\\\\AndroidApp\\\\src\\\\screens\\\\status\\\\threeChart.component.js\";\nimport { Layout, Text } from \"@ui-kitten/components\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useSelector } from \"react-redux\";\nimport React from \"react\";\nimport TChart from \"./components/TChart\";\nimport { useNavigationState } from \"@react-navigation/native\";\nimport Animated from \"react-native-reanimated\";\nimport BottomSheet from \"reanimated-bottom-sheet\";\nexport default function ThreeChart(props) {\n  var _this = this;\n\n  var cubeData = useSelector(function (state) {\n    return state.RoomData.cubeData;\n  });\n  var sheetRef = React.useRef(null);\n  var currentRoomInfo = useSelector(function (state) {\n    return state.RoomList.currentRoomInfo;\n  });\n  var screenName = useNavigationState(function (state) {\n    return state.routes[state.index].name;\n  });\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      config = _React$useState4[0],\n      setConfig = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    axis: \"x\",\n    level: 0\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      slice = _React$useState6[0],\n      setSlice = _React$useState6[1];\n\n  React.useEffect(function () {\n    if (currentRoomInfo) {\n      var xBlock = currentRoomInfo.size.x / currentRoomInfo.sensorDensity - 1;\n      var yBlock = currentRoomInfo.size.y / currentRoomInfo.sensorDensity - 1;\n      var zBlock = currentRoomInfo.size.z / currentRoomInfo.sensorDensity - 1;\n\n      if (config == null) {\n        setConfig({\n          size: {\n            x: xBlock,\n            y: yBlock,\n            z: zBlock,\n            tilesize: 5\n          },\n          door: currentRoomInfo.door,\n          \"axis-labels\": {\n            \"axis-x\": {\n              show: false,\n              list: []\n            },\n            \"axis-y\": {\n              show: false,\n              list: []\n            },\n            \"axis-z\": {\n              show: false,\n              list: []\n            }\n          }\n        });\n      }\n\n      console.log(screenName);\n\n      if (cubeData) {\n        if (screenName && screenName === \"ThreeChart\" && props.parentScreen && props.parentScreen === \"Status\") {\n          setData(cubeData.cubeData);\n          console.log(\"SET DATA\");\n        }\n      } else {\n        setData({\n          values: new Array(xBlock).fill(new Array(yBlock).fill(new Array(zBlock).fill(90))),\n          min: 98,\n          max: 99\n        });\n      }\n    } else {\n      setData(null);\n      setConfig(null);\n    }\n  }, [cubeData, currentRoomInfo, props.parentScreen]);\n\n  var renderContent = function renderContent() {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: \"white\",\n        padding: 16,\n        height: 450\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, \"Swipe down to close\"));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Layout, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, data && config && slice && React.createElement(TChart, {\n    config: config,\n    data: data,\n    slice: slice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), React.createElement(Button, {\n    title: \"Open Bottom Sheet\",\n    onPress: function onPress() {\n      return sheetRef.current.snapTo(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), React.createElement(BottomSheet, {\n    ref: sheetRef,\n    snapPoints: [450, 300, 0],\n    borderRadius: 10,\n    renderContent: renderContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/screens/status/threeChart.component.js"],"names":["Layout","Text","useSelector","React","TChart","useNavigationState","Animated","BottomSheet","ThreeChart","props","cubeData","state","RoomData","sheetRef","useRef","currentRoomInfo","RoomList","screenName","routes","index","name","useState","data","setData","config","setConfig","axis","level","slice","setSlice","useEffect","xBlock","size","x","sensorDensity","yBlock","y","zBlock","z","tilesize","door","show","list","console","log","parentScreen","values","Array","fill","min","max","renderContent","backgroundColor","padding","height","flex","alignItems","justifyContent","current","snapTo"],"mappings":"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","sourcesContent":["import { Layout, Text } from \"@ui-kitten/components\";\r\nimport { StyleSheet, View, Button } from \"react-native\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport TChart from \"./components/TChart\";\r\nimport { useNavigationState } from \"@react-navigation/native\";\r\nimport Animated from \"react-native-reanimated\";\r\nimport BottomSheet from \"reanimated-bottom-sheet\";\r\n\r\nexport default function ThreeChart(props) {\r\n  const cubeData = useSelector((state) => state.RoomData.cubeData);\r\n  const sheetRef = React.useRef(null);\r\n  const currentRoomInfo = useSelector(\r\n    (state) => state.RoomList.currentRoomInfo\r\n  );\r\n  const screenName = useNavigationState(\r\n    (state) => state.routes[state.index].name\r\n  );\r\n  const [data, setData] = React.useState(null);\r\n  const [config, setConfig] = React.useState(null);\r\n  const [slice, setSlice] = React.useState({\r\n    axis: \"x\",\r\n    level: 0,\r\n  });\r\n  React.useEffect(() => {\r\n    if (currentRoomInfo) {\r\n      let xBlock = currentRoomInfo.size.x / currentRoomInfo.sensorDensity - 1;\r\n      let yBlock = currentRoomInfo.size.y / currentRoomInfo.sensorDensity - 1;\r\n      let zBlock = currentRoomInfo.size.z / currentRoomInfo.sensorDensity - 1;\r\n      if (config == null) {\r\n        setConfig({\r\n          size: {\r\n            x: xBlock,\r\n            y: yBlock,\r\n            z: zBlock,\r\n            tilesize: 5,\r\n          },\r\n          door: currentRoomInfo.door,\r\n          \"axis-labels\": {\r\n            \"axis-x\": {\r\n              show: false,\r\n              list: [],\r\n            },\r\n            \"axis-y\": {\r\n              show: false,\r\n              list: [],\r\n            },\r\n            \"axis-z\": {\r\n              show: false,\r\n              list: [],\r\n            },\r\n          },\r\n        });\r\n      }\r\n      console.log(screenName);\r\n      if (cubeData) {\r\n        if (\r\n          screenName &&\r\n          screenName === \"ThreeChart\" &&\r\n          props.parentScreen &&\r\n          props.parentScreen === \"Status\"\r\n        ) {\r\n          setData(cubeData.cubeData);\r\n          console.log(\"SET DATA\");\r\n        }\r\n      } else {\r\n        setData({\r\n          values: new Array(xBlock).fill(\r\n            new Array(yBlock).fill(new Array(zBlock).fill(90))\r\n          ),\r\n          min: 98,\r\n          max: 99,\r\n        });\r\n      }\r\n    } else {\r\n      setData(null);\r\n      setConfig(null);\r\n    }\r\n  }, [cubeData, currentRoomInfo, props.parentScreen]);\r\n  const renderContent = () => (\r\n    <View\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        padding: 16,\r\n        height: 450,\r\n      }}\r\n    >\r\n      <Text>Swipe down to close</Text>\r\n    </View>\r\n  );\r\n  return (\r\n    <>\r\n      <Layout\r\n        style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n      >\r\n        {data && config && slice && (\r\n          <TChart config={config} data={data} slice={slice} />\r\n        )}\r\n        <Button\r\n          title=\"Open Bottom Sheet\"\r\n          onPress={() => sheetRef.current.snapTo(0)}\r\n        />\r\n      </Layout>\r\n      <BottomSheet\r\n        ref={sheetRef}\r\n        snapPoints={[450, 300, 0]}\r\n        borderRadius={10}\r\n        renderContent={renderContent}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}