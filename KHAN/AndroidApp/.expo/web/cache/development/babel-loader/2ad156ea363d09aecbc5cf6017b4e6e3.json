{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_CURR_ROOM_SENSOR_MAP, GET_CURR_ROOM_SENSOR_MAP_SUCCESS, GET_CURR_ROOM_SENSOR_MAP_FAILED, ADD_SENSOR, ADD_SENSOR_SUCCESS, ADD_SENSOR_FAILED, UPDATE_SENSOR, UPDATE_SENSOR_SUCCESS, UPDATE_SENSOR_FAILED, DELETE_SENSOR, DELETE_SENSOR_SUCCESS, DELETE_SENSOR_FAILED } from \"./constants\";\nvar INIT_STATE = {\n  loading: false,\n  error: null,\n  structure: null\n};\n\nvar RoomStructrure = function RoomStructrure() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_CURR_ROOM_SENSOR_MAP:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: null,\n        structure: null\n      });\n\n    case GET_CURR_ROOM_SENSOR_MAP_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: null,\n        structure: action.payload.data.map.map ? action.payload.data : null\n      });\n\n    case GET_CURR_ROOM_SENSOR_MAP_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.payload.error,\n        structure: null\n      });\n\n    case ADD_SENSOR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: null\n      });\n\n    case ADD_SENSOR_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: null,\n        structure: action.payload.data.map.map ? action.payload.data : null\n      });\n\n    case ADD_SENSOR_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.payload.error,\n        structure: null\n      });\n\n    case UPDATE_SENSOR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: null\n      });\n\n    case UPDATE_SENSOR_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: null,\n        structure: action.payload.data.map.map ? action.payload.data : null\n      });\n\n    case UPDATE_SENSOR_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.payload.error,\n        structure: null\n      });\n\n    case DELETE_SENSOR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: null\n      });\n\n    case DELETE_SENSOR_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: null,\n        structure: action.payload.data.map.map ? action.payload.data : null\n      });\n\n    case DELETE_SENSOR_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.payload.error,\n        structure: null\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default RoomStructrure;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/roomStructrure/reducers.js"],"names":["GET_CURR_ROOM_SENSOR_MAP","GET_CURR_ROOM_SENSOR_MAP_SUCCESS","GET_CURR_ROOM_SENSOR_MAP_FAILED","ADD_SENSOR","ADD_SENSOR_SUCCESS","ADD_SENSOR_FAILED","UPDATE_SENSOR","UPDATE_SENSOR_SUCCESS","UPDATE_SENSOR_FAILED","DELETE_SENSOR","DELETE_SENSOR_SUCCESS","DELETE_SENSOR_FAILED","INIT_STATE","loading","error","structure","RoomStructrure","state","action","type","payload","data","map"],"mappings":"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","sourcesContent":["import {\r\n    GET_CURR_ROOM_SENSOR_MAP,\r\n    GET_CURR_ROOM_SENSOR_MAP_SUCCESS,\r\n    GET_CURR_ROOM_SENSOR_MAP_FAILED,\r\n\r\n    ADD_SENSOR,\r\n    ADD_SENSOR_SUCCESS,\r\n    ADD_SENSOR_FAILED,\r\n\r\n    UPDATE_SENSOR,\r\n    UPDATE_SENSOR_SUCCESS,\r\n    UPDATE_SENSOR_FAILED,\r\n\r\n    DELETE_SENSOR,\r\n    DELETE_SENSOR_SUCCESS,\r\n    DELETE_SENSOR_FAILED,\r\n} from './constants';\r\n\r\nconst INIT_STATE = {\r\n    loading: false,\r\n    error:null,\r\n    structure:null\r\n};\r\n\r\nconst RoomStructrure = (state = INIT_STATE, action) =>{\r\n    switch (action.type) {\r\n        case GET_CURR_ROOM_SENSOR_MAP:\r\n        return{\r\n            ...state,\r\n            loading: true,\r\n            error:null,\r\n            structure:null\r\n        }\r\n        case GET_CURR_ROOM_SENSOR_MAP_SUCCESS:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:null,\r\n            structure: (action.payload.data.map.map) ? action.payload.data :null\r\n        }\r\n        case GET_CURR_ROOM_SENSOR_MAP_FAILED:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:action.payload.error,\r\n            structure: null\r\n        }\r\n        case ADD_SENSOR:\r\n        return{\r\n            ...state,\r\n            loading: true,\r\n            error:null,\r\n        }\r\n        case ADD_SENSOR_SUCCESS:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:null,\r\n            structure: (action.payload.data.map.map) ? action.payload.data :null\r\n        }\r\n        case ADD_SENSOR_FAILED:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:action.payload.error,\r\n            structure: null\r\n        }\r\n        case UPDATE_SENSOR:\r\n        return{\r\n            ...state,\r\n            loading: true,\r\n            error:null,\r\n        }\r\n        case UPDATE_SENSOR_SUCCESS:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:null,\r\n            structure: (action.payload.data.map.map) ? action.payload.data :null\r\n        }\r\n        case UPDATE_SENSOR_FAILED:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:action.payload.error,\r\n            structure: null\r\n        }\r\n        case DELETE_SENSOR:\r\n        return{\r\n            ...state,\r\n            loading: true,\r\n            error:null,\r\n        }\r\n        case DELETE_SENSOR_SUCCESS:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:null,\r\n            structure: (action.payload.data.map.map) ? action.payload.data :null\r\n        }\r\n        case DELETE_SENSOR_FAILED:\r\n        return{\r\n            ...state,\r\n            loading: false,\r\n            error:action.payload.error,\r\n            structure: null\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport default RoomStructrure;"]},"metadata":{},"sourceType":"module"}