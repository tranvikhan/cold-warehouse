{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"D:\\\\GIT HUB\\\\NCKH2020\\\\KHAN\\\\AndroidApp\\\\src\\\\screens\\\\notification\\\\pushNotication.js\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function PushNotication() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'space-around'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Your expo push token: \", expoPushToken), React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Title: \", notification && notification.request.content.title, \" \"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Body: \", notification && notification.request.content.body), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Data: \", notification && JSON.stringify(notification.request.content.data))), React.createElement(Button, {\n    title: \"Press to schedule a notification\",\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(schedulePushNotification());\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction schedulePushNotification() {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: \"You've got mail! ðŸ“¬\",\n              body: 'Here is the notification body',\n              data: {\n                data: 'goes here'\n              }\n            },\n            trigger: {\n              seconds: 0\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context4.next = 21;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context4.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context4.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          console.log(token);\n          _context4.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F'\n            });\n          }\n\n          return _context4.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/screens/notification/pushNotication.js"],"names":["Constants","Notifications","Permissions","React","useState","useEffect","useRef","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","PushNotication","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","flex","alignItems","justifyContent","request","content","title","body","JSON","stringify","data","schedulePushNotification","scheduleNotificationAsync","trigger","seconds","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-permissions';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Text, View, Button, Platform } from 'react-native';\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: true,\r\n    shouldSetBadge: true,\r\n  }),\r\n});\r\n\r\nexport default function PushNotication() {\r\n  const [expoPushToken, setExpoPushToken] = useState('');\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n\r\n  useEffect(() => {\r\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n      setNotification(notification);\r\n    });\r\n\r\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n      console.log(response);\r\n    });\r\n\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(notificationListener);\r\n      Notifications.removeNotificationSubscription(responseListener);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'space-around',\r\n      }}>\r\n      <Text>Your expo push token: {expoPushToken}</Text>\r\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n        <Text>Title: {notification && notification.request.content.title} </Text>\r\n        <Text>Body: {notification && notification.request.content.body}</Text>\r\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\r\n      </View>\r\n      <Button\r\n        title=\"Press to schedule a notification\"\r\n        onPress={async () => {\r\n          await schedulePushNotification();\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nasync function schedulePushNotification() {\r\n  await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: \"You've got mail! ðŸ“¬\",\r\n      body: 'Here is the notification body',\r\n      data: { data: 'goes here' },\r\n    },\r\n    trigger: { seconds: 0 },\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}"]},"metadata":{},"sourceType":"module"}