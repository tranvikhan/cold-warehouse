{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport getNode from \"./getNode\";\nexport default function createPseudoHook(_ref) {\n  var events = _ref.events;\n  return function (ref) {\n    var _this = this;\n\n    if (Platform.OS !== 'web') {\n      return false;\n    }\n\n    var _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isActive = _React$useState2[0],\n        setActive = _React$useState2[1];\n\n    React.useEffect(function () {\n      var _events = _slicedToArray(events, 2),\n          eventIn = _events[0],\n          eventOut = _events[1];\n\n      var node = getNode(ref);\n\n      if (!node) {\n        return;\n      }\n\n      var resolve = function resolve(value) {\n        setActive(value);\n      };\n\n      var onStart = resolve.bind(_this, true);\n      var onEnd = resolve.bind(_this, false);\n      node.addEventListener(eventIn, onStart);\n      node.addEventListener(eventOut, onEnd);\n\n      if (eventOut === 'mouseup') {\n        document.addEventListener(eventOut, onEnd, false);\n      }\n\n      return function () {\n        document.removeEventListener(eventOut, onEnd, false);\n        node.removeEventListener(eventIn, onStart);\n        node.removeEventListener(eventOut, onEnd);\n      };\n    }, [ref && ref.current]);\n    return isActive;\n  };\n}","map":{"version":3,"sources":["../src/createPseudoHook.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;AAEA,OAAO,OAAP;AAEA,eAAc,SAAU,gBAAV,OAA8D;AAAA,MAA9B,MAA8B,QAA9B,MAA8B;AAC1E,SAAO,UAAS,GAAT,EAAY;AAAA;;AACjB,QAEE,QAAQ,CAAC,EAAT,KAAgB,KAFlB,EAGE;AACA,aAAO,KAAP;AACD;;AANgB,0BAQa,KAAK,CAAC,QAAN,CAAe,KAAf,CARb;AAAA;AAAA,QAQV,QARU;AAAA,QAQA,SARA;;AAUjB,IAAA,KAAK,CAAC,SAAN,CAAgB,YAAK;AAAA,mCACS,MADT;AAAA,UACZ,OADY;AAAA,UACH,QADG;;AAGnB,UAAM,IAAI,GAAG,OAAO,CAAC,GAAD,CAApB;;AACA,UAAI,CAAC,IAAL,EAAW;AACT;AACD;;AACD,UAAM,OAAO,GAAG,SAAV,OAAU,CAAA,KAAK,EAAG;AACtB,QAAA,SAAS,CAAC,KAAD,CAAT;AACD,OAFD;;AAKA,UAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAmB,IAAnB,CAAhB;AAEA,UAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAmB,KAAnB,CAAd;AAEA,MAAA,IAAI,CAAC,gBAAL,CAAsB,OAAtB,EAA+B,OAA/B;AACA,MAAA,IAAI,CAAC,gBAAL,CAAsB,QAAtB,EAAgC,KAAhC;;AAGA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,KAApC,EAA2C,KAA3C;AACD;;AACD,aAAO,YAAK;AACV,QAAA,QAAQ,CAAC,mBAAT,CAA6B,QAA7B,EAAuC,KAAvC,EAA8C,KAA9C;AACA,QAAA,IAAI,CAAC,mBAAL,CAAyB,OAAzB,EAAkC,OAAlC;AACA,QAAA,IAAI,CAAC,mBAAL,CAAyB,QAAzB,EAAmC,KAAnC;AACD,OAJD;AAKD,KA5BD,EA4BG,CAAC,GAAG,IAAI,GAAG,CAAC,OAAZ,CA5BH;AA8BA,WAAO,QAAP;AACD,GAzCD;AA0CD","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport getNode from './getNode'\n\nexport default function createPseudoHook<T>({ events }: { events: string[] }): (ref: React.MutableRefObject<T>) => any {\n  return function(ref) {\n    if (\n      // Pseudo classes only work in the browser\n      Platform.OS !== 'web'\n    ) {\n      return false;\n    }\n  \n    const [isActive, setActive] = React.useState(false);\n\n    React.useEffect(() => {\n      const [eventIn, eventOut] = events;\n\n      const node = getNode(ref);\n      if (!node) {\n        return;\n      }\n      const resolve = value => {\n        setActive(value);\n      };\n\n      // @ts-ignore\n      const onStart = resolve.bind(this, true);\n      // @ts-ignore\n      const onEnd = resolve.bind(this, false);\n\n      node.addEventListener(eventIn, onStart);\n      node.addEventListener(eventOut, onEnd);\n\n      // Special case for useActive to respond when the user drags out of the view and releases.\n      if (eventOut === 'mouseup') {\n        document.addEventListener(eventOut, onEnd, false);\n      }\n      return () => {\n        document.removeEventListener(eventOut, onEnd, false);\n        node.removeEventListener(eventIn, onStart);\n        node.removeEventListener(eventOut, onEnd);\n      };\n    }, [ref && ref.current]);\n\n    return isActive\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}