{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(getCurrentRoomSensorMap),\n    _marked2 = _regeneratorRuntime.mark(updateSensor),\n    _marked3 = _regeneratorRuntime.mark(addSensor),\n    _marked4 = _regeneratorRuntime.mark(deleteSensor),\n    _marked5 = _regeneratorRuntime.mark(watchGetCurrentRoomSensorMap),\n    _marked6 = _regeneratorRuntime.mark(watchUpdateSensor),\n    _marked7 = _regeneratorRuntime.mark(watchAddeSensor),\n    _marked8 = _regeneratorRuntime.mark(watchDeleteSensor),\n    _marked9 = _regeneratorRuntime.mark(roomStructrureSaga);\n\nimport { all, call, fork, takeEvery, put } from \"redux-saga/effects\";\nimport { ADD_SENSOR, GET_CURR_ROOM_SENSOR_MAP, UPDATE_SENSOR, DELETE_SENSOR } from \"../constants\";\nimport { addSensorFailed, addSensorSuccess, deleteSensorFailed, deleteSensorSuccess, getRoomStructureFailed, getRoomStructureSuccess, updateSensorFailed, updateSensorSuccess } from \"../actions\";\nimport { requestApi } from \"../../helpers/api\";\n\nfunction getCurrentRoomSensorMap(_ref) {\n  var _ref$payload, room_id, user, res;\n\n  return _regeneratorRuntime.wrap(function getCurrentRoomSensorMap$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, room_id = _ref$payload.room_id, user = _ref$payload.user;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(requestApi, {\n            method: \"get\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/structure/\",\n            params: {\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context.sent;\n\n          if (!(res.status === \"success\")) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(getRoomStructureSuccess(res.result.structure));\n\n        case 8:\n          _context.next = 12;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return put(getRoomStructureFailed(res.result));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 18;\n          return put(getRoomStructureFailed(_context.t0));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 14]]);\n}\n\nfunction updateSensor(_ref2) {\n  var _ref2$payload, user, room_id, sensor_id, location, res;\n\n  return _regeneratorRuntime.wrap(function updateSensor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, user = _ref2$payload.user, room_id = _ref2$payload.room_id, sensor_id = _ref2$payload.sensor_id, location = _ref2$payload.location;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(requestApi, {\n            method: \"post\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/structure/sensor/edit\",\n            data: {\n              room_id: room_id,\n              sensor_id: sensor_id,\n              location: location\n            }\n          });\n\n        case 4:\n          res = _context2.sent;\n\n          if (!(res.status === \"success\")) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 8;\n          return put(updateSensorSuccess(res.result.structure));\n\n        case 8:\n          _context2.next = 12;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return put(updateSensorFailed(res.result));\n\n        case 12:\n          _context2.next = 18;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 18;\n          return put(updateSensorFailed(_context2.t0));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 14]]);\n}\n\nfunction addSensor(_ref3) {\n  var _ref3$payload, user, room_id, sensor_id, location, res;\n\n  return _regeneratorRuntime.wrap(function addSensor$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, user = _ref3$payload.user, room_id = _ref3$payload.room_id, sensor_id = _ref3$payload.sensor_id, location = _ref3$payload.location;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(requestApi, {\n            method: \"post\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/structure/sensor/add\",\n            data: {\n              room_id: room_id,\n              sensor_id: sensor_id,\n              location: location\n            }\n          });\n\n        case 4:\n          res = _context3.sent;\n\n          if (!(res.status === \"success\")) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 8;\n          return put(addSensorSuccess(res.result.structure));\n\n        case 8:\n          _context3.next = 12;\n          break;\n\n        case 10:\n          _context3.next = 12;\n          return put(addSensorFailed(res.result));\n\n        case 12:\n          _context3.next = 18;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 18;\n          return put(addSensorFailed(_context3.t0));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 14]]);\n}\n\nfunction deleteSensor(_ref4) {\n  var _ref4$payload, user, room_id, sensor_id, res;\n\n  return _regeneratorRuntime.wrap(function deleteSensor$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, user = _ref4$payload.user, room_id = _ref4$payload.room_id, sensor_id = _ref4$payload.sensor_id;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(requestApi, {\n            method: \"post\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/structure/sensor/delete\",\n            data: {\n              room_id: room_id,\n              sensor_id: sensor_id\n            }\n          });\n\n        case 4:\n          res = _context4.sent;\n\n          if (!(res.status === \"success\")) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(deleteSensorSuccess(res.result.structure));\n\n        case 8:\n          _context4.next = 12;\n          break;\n\n        case 10:\n          _context4.next = 12;\n          return put(deleteSensorFailed(res.result));\n\n        case 12:\n          _context4.next = 18;\n          break;\n\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 18;\n          return put(deleteSensorFailed(_context4.t0));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 14]]);\n}\n\nfunction watchGetCurrentRoomSensorMap() {\n  return _regeneratorRuntime.wrap(function watchGetCurrentRoomSensorMap$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(GET_CURR_ROOM_SENSOR_MAP, getCurrentRoomSensorMap);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchUpdateSensor() {\n  return _regeneratorRuntime.wrap(function watchUpdateSensor$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(UPDATE_SENSOR, updateSensor);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddeSensor() {\n  return _regeneratorRuntime.wrap(function watchAddeSensor$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(ADD_SENSOR, addSensor);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchDeleteSensor() {\n  return _regeneratorRuntime.wrap(function watchDeleteSensor$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(DELETE_SENSOR, deleteSensor);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction roomStructrureSaga() {\n  return _regeneratorRuntime.wrap(function roomStructrureSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchGetCurrentRoomSensorMap), fork(watchUpdateSensor), fork(watchAddeSensor), fork(watchDeleteSensor)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default roomStructrureSaga;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/roomStructrure/saga.js"],"names":["getCurrentRoomSensorMap","updateSensor","addSensor","deleteSensor","watchGetCurrentRoomSensorMap","watchUpdateSensor","watchAddeSensor","watchDeleteSensor","roomStructrureSaga","all","call","fork","takeEvery","put","ADD_SENSOR","GET_CURR_ROOM_SENSOR_MAP","UPDATE_SENSOR","DELETE_SENSOR","addSensorFailed","addSensorSuccess","deleteSensorFailed","deleteSensorSuccess","getRoomStructureFailed","getRoomStructureSuccess","updateSensorFailed","updateSensorSuccess","requestApi","payload","room_id","user","method","headers","accessToken","url","params","res","status","result","structure","sensor_id","location","data"],"mappings":"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","sourcesContent":["import { all, call, fork, takeEvery, put } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_SENSOR,\r\n  GET_CURR_ROOM_SENSOR_MAP,\r\n  UPDATE_SENSOR,\r\n  DELETE_SENSOR,\r\n} from \"../constants\";\r\n\r\nimport {\r\n  addSensorFailed,\r\n  addSensorSuccess,\r\n  deleteSensorFailed,\r\n  deleteSensorSuccess,\r\n  getRoomStructureFailed,\r\n  getRoomStructureSuccess,\r\n  updateSensorFailed,\r\n  updateSensorSuccess,\r\n} from \"../actions\";\r\n\r\nimport { requestApi } from \"../../helpers/api\";\r\n\r\nfunction* getCurrentRoomSensorMap({ payload: { room_id, user } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"get\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/structure/\",\r\n      params: { room_id },\r\n    });\r\n    if (res.status === \"success\") {\r\n      yield put(getRoomStructureSuccess(res.result.structure));\r\n    } else {\r\n      yield put(getRoomStructureFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(getRoomStructureFailed(error));\r\n  }\r\n}\r\n\r\nfunction* updateSensor({ payload: { user, room_id, sensor_id, location } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/structure/sensor/edit\",\r\n      data: { room_id, sensor_id, location: location },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(updateSensorSuccess(res.result.structure));\r\n    } else {\r\n      yield put(updateSensorFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(updateSensorFailed(error));\r\n  }\r\n}\r\n\r\nfunction* addSensor({ payload: { user, room_id, sensor_id, location } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/structure/sensor/add\",\r\n      data: { room_id, sensor_id, location: location },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(addSensorSuccess(res.result.structure));\r\n    } else {\r\n      yield put(addSensorFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(addSensorFailed(error));\r\n  }\r\n}\r\n\r\nfunction* deleteSensor({ payload: { user, room_id, sensor_id } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/structure/sensor/delete\",\r\n      data: { room_id, sensor_id },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(deleteSensorSuccess(res.result.structure));\r\n    } else {\r\n      yield put(deleteSensorFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(deleteSensorFailed(error));\r\n  }\r\n}\r\n\r\nfunction* watchGetCurrentRoomSensorMap() {\r\n  yield takeEvery(GET_CURR_ROOM_SENSOR_MAP, getCurrentRoomSensorMap);\r\n}\r\n\r\nfunction* watchUpdateSensor() {\r\n  yield takeEvery(UPDATE_SENSOR, updateSensor);\r\n}\r\n\r\nfunction* watchAddeSensor() {\r\n  yield takeEvery(ADD_SENSOR, addSensor);\r\n}\r\n\r\nfunction* watchDeleteSensor() {\r\n  yield takeEvery(DELETE_SENSOR, deleteSensor);\r\n}\r\n\r\nfunction* roomStructrureSaga() {\r\n  yield all([\r\n    fork(watchGetCurrentRoomSensorMap),\r\n    fork(watchUpdateSensor),\r\n    fork(watchAddeSensor),\r\n    fork(watchDeleteSensor),\r\n  ]);\r\n}\r\n\r\nexport default roomStructrureSaga;\r\n"]},"metadata":{},"sourceType":"module"}