{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(getUserAccessApi),\n    _marked2 = _regeneratorRuntime.mark(addAccessApi),\n    _marked3 = _regeneratorRuntime.mark(updateAccessApi),\n    _marked4 = _regeneratorRuntime.mark(replyAccessApi),\n    _marked5 = _regeneratorRuntime.mark(deleteAccessApi),\n    _marked6 = _regeneratorRuntime.mark(watchGetUserAccess),\n    _marked7 = _regeneratorRuntime.mark(watchAddAccess),\n    _marked8 = _regeneratorRuntime.mark(watchUpdateAccess),\n    _marked9 = _regeneratorRuntime.mark(watchReplyAccess),\n    _marked10 = _regeneratorRuntime.mark(watchDeleteAccess),\n    _marked11 = _regeneratorRuntime.mark(roomAccessSaga);\n\nimport { all, call, fork, takeEvery, put } from \"redux-saga/effects\";\nimport { ADD_ACCESS, DELETE_ACCESS, GET_USER_ACCESS, REPLY_ACCESS, UPDATE_ACCESS } from \"./constants\";\nimport { AddAccessFailed, AddAccessSuccess, deleteAccessFailed, deleteAccessSuccess, getUserAccessFailed, getUserAccessSuccess, replyAccessFailed, replyAccessSuccess, updateAccessFailed, updateAccessSuccess } from \"./actions\";\nimport { requestApi } from \"helpers/api\";\n\nfunction getUserAccessApi(_ref) {\n  var _ref$payload, user, room_id, res;\n\n  return _regeneratorRuntime.wrap(function getUserAccessApi$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, user = _ref$payload.user, room_id = _ref$payload.room_id;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(requestApi, {\n            method: \"get\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/access/\",\n            params: {\n              user: user,\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context.sent;\n\n          if (!(res.status === \"success\")) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(getUserAccessSuccess(res.result.accesses));\n\n        case 8:\n          _context.next = 12;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return put(getUserAccessFailed(res.result));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 18;\n          return put(getUserAccessFailed(_context.t0));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 14]]);\n}\n\nfunction addAccessApi(_ref2) {\n  var _ref2$payload, user, room_id, user_id, role, res;\n\n  return _regeneratorRuntime.wrap(function addAccessApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, user = _ref2$payload.user, room_id = _ref2$payload.room_id, user_id = _ref2$payload.user_id, role = _ref2$payload.role;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(requestApi, {\n            method: \"post\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/access/add\",\n            data: {\n              room_id: room_id,\n              user_id: user_id,\n              role: role\n            }\n          });\n\n        case 4:\n          res = _context2.sent;\n\n          if (!(res.status === \"success\")) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 8;\n          return put(AddAccessSuccess(res.result.access));\n\n        case 8:\n          _context2.next = 12;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return put(AddAccessFailed(res.result));\n\n        case 12:\n          _context2.next = 18;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 18;\n          return put(AddAccessFailed(_context2.t0));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 14]]);\n}\n\nfunction updateAccessApi(_ref3) {\n  var _ref3$payload, user, room_id, access_id, role, res;\n\n  return _regeneratorRuntime.wrap(function updateAccessApi$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, user = _ref3$payload.user, room_id = _ref3$payload.room_id, access_id = _ref3$payload.access_id, role = _ref3$payload.role;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(requestApi, {\n            method: \"post\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/access/edit\",\n            data: {\n              room_id: room_id,\n              access_id: access_id,\n              role: role\n            }\n          });\n\n        case 4:\n          res = _context3.sent;\n\n          if (!(res.status === \"success\")) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 8;\n          return put(updateAccessSuccess(res.result.access));\n\n        case 8:\n          _context3.next = 12;\n          break;\n\n        case 10:\n          _context3.next = 12;\n          return put(updateAccessFailed(res.result));\n\n        case 12:\n          _context3.next = 18;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 18;\n          return put(updateAccessFailed(_context3.t0));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 14]]);\n}\n\nfunction replyAccessApi(_ref4) {\n  var _ref4$payload, user, access_id, accepted, res;\n\n  return _regeneratorRuntime.wrap(function replyAccessApi$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, user = _ref4$payload.user, access_id = _ref4$payload.access_id, accepted = _ref4$payload.accepted;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(requestApi, {\n            method: \"post\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/access/reply\",\n            data: {\n              access_id: access_id,\n              accepted: accepted\n            }\n          });\n\n        case 4:\n          res = _context4.sent;\n\n          if (!(res.status === \"success\")) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(replyAccessSuccess(res.result.access));\n\n        case 8:\n          _context4.next = 12;\n          break;\n\n        case 10:\n          _context4.next = 12;\n          return put(replyAccessFailed(res.result));\n\n        case 12:\n          _context4.next = 18;\n          break;\n\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 18;\n          return put(replyAccessFailed(_context4.t0));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 14]]);\n}\n\nfunction deleteAccessApi(_ref5) {\n  var _ref5$payload, user, room_id, access_id, res;\n\n  return _regeneratorRuntime.wrap(function deleteAccessApi$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _ref5$payload = _ref5.payload, user = _ref5$payload.user, room_id = _ref5$payload.room_id, access_id = _ref5$payload.access_id;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(requestApi, {\n            method: \"delete\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/room/access/\",\n            data: {\n              room_id: room_id,\n              access_id: access_id\n            }\n          });\n\n        case 4:\n          res = _context5.sent;\n\n          if (!(res.status === \"success\")) {\n            _context5.next = 10;\n            break;\n          }\n\n          _context5.next = 8;\n          return put(deleteAccessSuccess(access_id));\n\n        case 8:\n          _context5.next = 12;\n          break;\n\n        case 10:\n          _context5.next = 12;\n          return put(deleteAccessFailed(res.result));\n\n        case 12:\n          _context5.next = 18;\n          break;\n\n        case 14:\n          _context5.prev = 14;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 18;\n          return put(deleteAccessFailed(_context5.t0));\n\n        case 18:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 14]]);\n}\n\nfunction watchGetUserAccess() {\n  return _regeneratorRuntime.wrap(function watchGetUserAccess$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(GET_USER_ACCESS, getUserAccessApi);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddAccess() {\n  return _regeneratorRuntime.wrap(function watchAddAccess$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(ADD_ACCESS, addAccessApi);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchUpdateAccess() {\n  return _regeneratorRuntime.wrap(function watchUpdateAccess$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(UPDATE_ACCESS, updateAccessApi);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchReplyAccess() {\n  return _regeneratorRuntime.wrap(function watchReplyAccess$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeEvery(REPLY_ACCESS, replyAccessApi);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchDeleteAccess() {\n  return _regeneratorRuntime.wrap(function watchDeleteAccess$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(DELETE_ACCESS, deleteAccessApi);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction roomAccessSaga() {\n  return _regeneratorRuntime.wrap(function roomAccessSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchGetUserAccess), fork(watchUpdateAccess), fork(watchAddAccess), fork(watchReplyAccess), fork(watchDeleteAccess)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nexport default roomAccessSaga;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/roomAccess/saga.js"],"names":["getUserAccessApi","addAccessApi","updateAccessApi","replyAccessApi","deleteAccessApi","watchGetUserAccess","watchAddAccess","watchUpdateAccess","watchReplyAccess","watchDeleteAccess","roomAccessSaga","all","call","fork","takeEvery","put","ADD_ACCESS","DELETE_ACCESS","GET_USER_ACCESS","REPLY_ACCESS","UPDATE_ACCESS","AddAccessFailed","AddAccessSuccess","deleteAccessFailed","deleteAccessSuccess","getUserAccessFailed","getUserAccessSuccess","replyAccessFailed","replyAccessSuccess","updateAccessFailed","updateAccessSuccess","requestApi","payload","user","room_id","method","headers","accessToken","url","params","res","status","result","accesses","user_id","role","data","access","access_id","accepted"],"mappings":"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","sourcesContent":["import { all, call, fork, takeEvery, put } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_ACCESS,\r\n  DELETE_ACCESS,\r\n  GET_USER_ACCESS,\r\n  REPLY_ACCESS,\r\n  UPDATE_ACCESS,\r\n} from \"./constants\";\r\n\r\nimport {\r\n  AddAccessFailed,\r\n  AddAccessSuccess,\r\n  deleteAccessFailed,\r\n  deleteAccessSuccess,\r\n  getUserAccessFailed,\r\n  getUserAccessSuccess,\r\n  replyAccessFailed,\r\n  replyAccessSuccess,\r\n  updateAccessFailed,\r\n  updateAccessSuccess,\r\n} from \"./actions\";\r\n\r\nimport { requestApi } from \"helpers/api\";\r\n\r\nfunction* getUserAccessApi({ payload: { user, room_id } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"get\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/access/\",\r\n      params: { user, room_id },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(getUserAccessSuccess(res.result.accesses));\r\n    } else {\r\n      yield put(getUserAccessFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(getUserAccessFailed(error));\r\n  }\r\n}\r\n\r\nfunction* addAccessApi({ payload: { user, room_id, user_id, role } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/access/add\",\r\n      data: { room_id, user_id, role },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(AddAccessSuccess(res.result.access));\r\n    } else {\r\n      yield put(AddAccessFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(AddAccessFailed(error));\r\n  }\r\n}\r\n\r\nfunction* updateAccessApi({ payload: { user, room_id, access_id, role } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/access/edit\",\r\n      data: { room_id, access_id, role: role },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(updateAccessSuccess(res.result.access));\r\n    } else {\r\n      yield put(updateAccessFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(updateAccessFailed(error));\r\n  }\r\n}\r\n\r\nfunction* replyAccessApi({ payload: { user, access_id, accepted } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/access/reply\",\r\n      data: { access_id, accepted },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(replyAccessSuccess(res.result.access));\r\n    } else {\r\n      yield put(replyAccessFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(replyAccessFailed(error));\r\n  }\r\n}\r\n\r\nfunction* deleteAccessApi({ payload: { user, room_id, access_id } }) {\r\n  try {\r\n    const res = yield call(requestApi, {\r\n      method: \"delete\",\r\n      headers: {\r\n        \"x-access-token\": user.accessToken,\r\n      },\r\n      url: \"api/room/access/\",\r\n      data: { room_id, access_id },\r\n    });\r\n\r\n    if (res.status === \"success\") {\r\n      yield put(deleteAccessSuccess(access_id));\r\n    } else {\r\n      yield put(deleteAccessFailed(res.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(deleteAccessFailed(error));\r\n  }\r\n}\r\n\r\nfunction* watchGetUserAccess() {\r\n  yield takeEvery(GET_USER_ACCESS, getUserAccessApi);\r\n}\r\nfunction* watchAddAccess() {\r\n  yield takeEvery(ADD_ACCESS, addAccessApi);\r\n}\r\n\r\nfunction* watchUpdateAccess() {\r\n  yield takeEvery(UPDATE_ACCESS, updateAccessApi);\r\n}\r\nfunction* watchReplyAccess() {\r\n  yield takeEvery(REPLY_ACCESS, replyAccessApi);\r\n}\r\n\r\nfunction* watchDeleteAccess() {\r\n  yield takeEvery(DELETE_ACCESS, deleteAccessApi);\r\n}\r\n\r\nfunction* roomAccessSaga() {\r\n  yield all([\r\n    fork(watchGetUserAccess),\r\n    fork(watchUpdateAccess),\r\n    fork(watchAddAccess),\r\n    fork(watchReplyAccess),\r\n    fork(watchDeleteAccess),\r\n  ]);\r\n}\r\n\r\nexport default roomAccessSaga;\r\n"]},"metadata":{},"sourceType":"module"}