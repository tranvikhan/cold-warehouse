{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\GIT HUB\\\\NCKH2020\\\\KHAN\\\\AndroidApp\\\\node_modules\\\\expo-three-orbit-controls\\\\build\\\\OrbitControlsView.js\";\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { OrbitControls } from \"./OrbitControls\";\n\nfunction polyfillEventTouches(nativeEvent) {\n  if (Platform.OS === 'web') return nativeEvent;\n  if (!Array.isArray(nativeEvent.touches)) nativeEvent.touches = [];\n\n  if (Array.isArray(nativeEvent.changedTouches)) {\n    if (!nativeEvent.touches.length) {\n      nativeEvent.touches = nativeEvent.changedTouches;\n    }\n  }\n\n  return nativeEvent;\n}\n\nvar OrbitControlsView = React.forwardRef(function (_ref, ref) {\n  var camera = _ref.camera,\n      props = _objectWithoutProperties(_ref, [\"camera\"]);\n\n  var _a;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      size = _React$useState2[0],\n      setSize = _React$useState2[1];\n\n  var viewRef = React.useRef(null);\n  var controls = React.useMemo(function () {\n    var _a;\n\n    if (camera && ((_a = viewRef) === null || _a === void 0 ? void 0 : _a.current)) {\n      return new OrbitControls(camera, viewRef.current);\n    }\n\n    return null;\n  }, [camera, (_a = viewRef) === null || _a === void 0 ? void 0 : _a.current]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      getControls: function getControls() {\n        return controls;\n      }\n    };\n  }, [controls]);\n  var responder = React.useMemo(function () {\n    function onTouchEnded(nativeEvent) {\n      var _a;\n\n      var polyfill = polyfillEventTouches(nativeEvent);\n      var isMisfiredNativeGesture = Platform.OS !== 'web' && nativeEvent.identifier > 1;\n\n      if (isMisfiredNativeGesture) {\n        return;\n      }\n\n      return (_a = controls) === null || _a === void 0 ? void 0 : _a.onTouchEnd(polyfill);\n    }\n\n    return PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {\n        return true;\n      },\n      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {\n        return true;\n      },\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n        return true;\n      },\n      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {\n        return true;\n      },\n      onPanResponderGrant: function onPanResponderGrant(_ref2) {\n        var nativeEvent = _ref2.nativeEvent;\n\n        var _a;\n\n        return (_a = controls) === null || _a === void 0 ? void 0 : _a.onTouchStart(nativeEvent);\n      },\n      onPanResponderMove: function onPanResponderMove(_ref3) {\n        var nativeEvent = _ref3.nativeEvent;\n\n        var _a;\n\n        return (_a = controls) === null || _a === void 0 ? void 0 : _a.onTouchMove(nativeEvent);\n      },\n      onPanResponderRelease: function onPanResponderRelease(_ref4) {\n        var nativeEvent = _ref4.nativeEvent;\n        return onTouchEnded(nativeEvent);\n      },\n      onPanResponderTerminate: function onPanResponderTerminate(_ref5) {\n        var nativeEvent = _ref5.nativeEvent;\n        return onTouchEnded(nativeEvent);\n      }\n    });\n  }, [controls]);\n  React.useEffect(function () {\n    if (!controls || !size) {\n      return;\n    }\n\n    controls.width = size.width;\n    controls.height = size.height;\n  }, [size, controls]);\n  return React.createElement(View, _extends({}, props, {\n    ref: viewRef\n  }, responder.panHandlers, {\n    onLayout: function onLayout(event) {\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n\n      setSize(event.nativeEvent.layout);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }));\n});\nexport default OrbitControlsView;","map":{"version":3,"sources":["../src/OrbitControlsView.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, ViewProps, PanResponder } from 'react-native';\nimport { Camera } from 'three';\n\nimport { OrbitControls } from './OrbitControls';\n\nexport type OrbitControlsViewProps = { camera: null | Camera } & ViewProps;\n\nfunction polyfillEventTouches(nativeEvent) {\n  if (Platform.OS === 'web') return nativeEvent;\n  if (!Array.isArray(nativeEvent.touches)) nativeEvent.touches = [];\n\n  if (Array.isArray(nativeEvent.changedTouches)) {\n    if (!nativeEvent.touches.length) {\n      nativeEvent.touches = nativeEvent.changedTouches;\n    }\n  }\n\n  return nativeEvent;\n}\n\nconst OrbitControlsView = React.forwardRef(\n  ({ camera, ...props }: OrbitControlsViewProps, ref) => {\n    const [size, setSize] = React.useState<null | {\n      width: number;\n      height: number;\n    }>(null);\n\n    const viewRef = React.useRef(null);\n\n    const controls: OrbitControls | null = React.useMemo(() => {\n      if (camera && viewRef?.current) {\n        return new OrbitControls(camera as any, viewRef.current);\n      }\n      return null;\n    }, [camera, viewRef?.current]);\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        getControls(): OrbitControls | null {\n          return controls;\n        },\n      }),\n      [controls]\n    );\n\n    const responder = React.useMemo(() => {\n      function onTouchEnded(nativeEvent) {\n        const polyfill = polyfillEventTouches(nativeEvent);\n\n        // If only one touch then we may be encountering the bug where pan responder returns a two finger touch-end event in two different calls. :/\n        // RNGH doesn't have this issue.\n        const isMisfiredNativeGesture =\n          Platform.OS !== 'web' && nativeEvent.identifier > 1;\n\n        if (isMisfiredNativeGesture) {\n          return;\n        }\n\n        return controls?.onTouchEnd(polyfill);\n      }\n\n      return PanResponder.create({\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\n        onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n        onMoveShouldSetPanResponder: (evt, gestureState) => true,\n        onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n\n        onPanResponderGrant({ nativeEvent }) {\n          return controls?.onTouchStart(nativeEvent);\n        },\n        onPanResponderMove({ nativeEvent }) {\n          return controls?.onTouchMove(nativeEvent);\n        },\n        onPanResponderRelease({ nativeEvent }) {\n          return onTouchEnded(nativeEvent);\n        },\n        onPanResponderTerminate({ nativeEvent }) {\n          return onTouchEnded(nativeEvent);\n        },\n      });\n    }, [controls]);\n\n    React.useEffect(() => {\n      if (!controls || !size) {\n        return;\n      }\n      controls.width = size.width;\n      controls.height = size.height;\n    }, [size, controls]);\n\n    return (\n      <View\n        {...props}\n        ref={viewRef}\n        {...responder.panHandlers}\n        onLayout={event => {\n          if (props.onLayout) {\n            props.onLayout(event);\n          }\n          setSize(event.nativeEvent.layout);\n        }}\n      />\n    );\n  }\n);\n\nexport default OrbitControlsView;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}