{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(getNotificationList),\n    _marked2 = _regeneratorRuntime.mark(deleteNotification),\n    _marked3 = _regeneratorRuntime.mark(deleteAllNotification),\n    _marked4 = _regeneratorRuntime.mark(watchGetNotification),\n    _marked5 = _regeneratorRuntime.mark(watchDeleteNotification),\n    _marked6 = _regeneratorRuntime.mark(watchDeleteAllNotification),\n    _marked7 = _regeneratorRuntime.mark(Notification);\n\nimport { all, call, fork, takeEvery, put } from \"redux-saga/effects\";\nimport { requestApi } from \"../../helpers/api\";\nimport { GET_NOTIFICATION_LIST, DELETE_NOTIFICATION, DELETE_ALL_NOTIFICATION } from \"../constants\";\nimport { getNotificationListSuccess, getNotificationListFailed, deleteNotificationSuccess, deleteNotificationFailed, deleteAllNotificationSuccess, deleteAllNotificationFailed } from \"../actions\";\n\nfunction getNotificationList(_ref) {\n  var user, res;\n  return _regeneratorRuntime.wrap(function getNotificationList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          user = _ref.payload.user;\n          _context.next = 3;\n          return call(requestApi, {\n            method: \"get\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/notification/all\"\n          });\n\n        case 3:\n          res = _context.sent;\n\n          if (!(res.status === \"success\")) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 7;\n          return put(getNotificationListSuccess(res.result.notifications));\n\n        case 7:\n          _context.next = 11;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put(getNotificationListFailed(res.result));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction deleteNotification(_ref2) {\n  var _ref2$payload, user, notification_id, res;\n\n  return _regeneratorRuntime.wrap(function deleteNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, user = _ref2$payload.user, notification_id = _ref2$payload.notification_id;\n          _context2.next = 3;\n          return call(requestApi, {\n            method: \"delete\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/notification\",\n            params: {\n              notification_id: notification_id\n            }\n          });\n\n        case 3:\n          res = _context2.sent;\n\n          if (!(res.status === \"success\")) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 7;\n          return put(deleteNotificationSuccess(notification_id));\n\n        case 7:\n          _context2.next = 11;\n          break;\n\n        case 9:\n          _context2.next = 11;\n          return put(deleteNotificationFailed(res.result));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction deleteAllNotification(_ref3) {\n  var user, res;\n  return _regeneratorRuntime.wrap(function deleteAllNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          user = _ref3.payload.user;\n          _context3.next = 3;\n          return call(requestApi, {\n            method: \"delete\",\n            headers: {\n              \"x-access-token\": user.accessToken\n            },\n            url: \"api/notification/all\"\n          });\n\n        case 3:\n          res = _context3.sent;\n\n          if (!(res.status === \"success\")) {\n            _context3.next = 9;\n            break;\n          }\n\n          _context3.next = 7;\n          return put(deleteAllNotificationSuccess(res.result));\n\n        case 7:\n          _context3.next = 11;\n          break;\n\n        case 9:\n          _context3.next = 11;\n          return put(deleteAllNotificationFailed(res.result));\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchGetNotification() {\n  return _regeneratorRuntime.wrap(function watchGetNotification$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(GET_NOTIFICATION_LIST, getNotificationList);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchDeleteNotification() {\n  return _regeneratorRuntime.wrap(function watchDeleteNotification$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(DELETE_NOTIFICATION, deleteNotification);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchDeleteAllNotification() {\n  return _regeneratorRuntime.wrap(function watchDeleteAllNotification$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(DELETE_ALL_NOTIFICATION, deleteAllNotification);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction Notification() {\n  return _regeneratorRuntime.wrap(function Notification$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchGetNotification), fork(watchDeleteNotification), fork(watchDeleteAllNotification)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default Notification;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/notification/saga.js"],"names":["getNotificationList","deleteNotification","deleteAllNotification","watchGetNotification","watchDeleteNotification","watchDeleteAllNotification","Notification","all","call","fork","takeEvery","put","requestApi","GET_NOTIFICATION_LIST","DELETE_NOTIFICATION","DELETE_ALL_NOTIFICATION","getNotificationListSuccess","getNotificationListFailed","deleteNotificationSuccess","deleteNotificationFailed","deleteAllNotificationSuccess","deleteAllNotificationFailed","user","payload","method","headers","accessToken","url","res","status","result","notifications","notification_id","params"],"mappings":"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","sourcesContent":["import { all, call, fork, takeEvery, put } from \"redux-saga/effects\";\r\nimport { requestApi } from \"../../helpers/api\";\r\nimport {\r\n  GET_NOTIFICATION_LIST,\r\n  DELETE_NOTIFICATION,\r\n  DELETE_ALL_NOTIFICATION,\r\n} from \"../constants\";\r\n\r\nimport {\r\n  getNotificationListSuccess,\r\n  getNotificationListFailed,\r\n  deleteNotificationSuccess,\r\n  deleteNotificationFailed,\r\n  deleteAllNotificationSuccess,\r\n  deleteAllNotificationFailed,\r\n} from \"../actions\";\r\n\r\nfunction* getNotificationList({ payload: { user } }) {\r\n  const res = yield call(requestApi, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"x-access-token\": user.accessToken,\r\n    },\r\n    url: \"api/notification/all\",\r\n  });\r\n  if (res.status === \"success\") {\r\n    yield put(getNotificationListSuccess(res.result.notifications));\r\n  } else {\r\n    yield put(getNotificationListFailed(res.result));\r\n  }\r\n}\r\n\r\nfunction* deleteNotification({ payload: { user, notification_id } }) {\r\n  const res = yield call(requestApi, {\r\n    method: \"delete\",\r\n    headers: {\r\n      \"x-access-token\": user.accessToken,\r\n    },\r\n    url: \"api/notification\",\r\n    params: {\r\n      notification_id,\r\n    },\r\n  });\r\n  if (res.status === \"success\") {\r\n    yield put(deleteNotificationSuccess(notification_id));\r\n  } else {\r\n    yield put(deleteNotificationFailed(res.result));\r\n  }\r\n}\r\n\r\nfunction* deleteAllNotification({ payload: { user } }) {\r\n  const res = yield call(requestApi, {\r\n    method: \"delete\",\r\n    headers: {\r\n      \"x-access-token\": user.accessToken,\r\n    },\r\n    url: \"api/notification/all\",\r\n  });\r\n  if (res.status === \"success\") {\r\n    yield put(deleteAllNotificationSuccess(res.result));\r\n  } else {\r\n    yield put(deleteAllNotificationFailed(res.result));\r\n  }\r\n}\r\n\r\nfunction* watchGetNotification() {\r\n  yield takeEvery(GET_NOTIFICATION_LIST, getNotificationList);\r\n}\r\nfunction* watchDeleteNotification() {\r\n  yield takeEvery(DELETE_NOTIFICATION, deleteNotification);\r\n}\r\nfunction* watchDeleteAllNotification() {\r\n  yield takeEvery(DELETE_ALL_NOTIFICATION, deleteAllNotification);\r\n}\r\n\r\nfunction* Notification() {\r\n  yield all([\r\n    fork(watchGetNotification),\r\n    fork(watchDeleteNotification),\r\n    fork(watchDeleteAllNotification),\r\n  ]);\r\n}\r\n\r\nexport default Notification;\r\n"]},"metadata":{},"sourceType":"module"}