{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(getAreaData),\n    _marked2 = _regeneratorRuntime.mark(getCurrentData),\n    _marked3 = _regeneratorRuntime.mark(getSensorData),\n    _marked4 = _regeneratorRuntime.mark(getCubeData),\n    _marked5 = _regeneratorRuntime.mark(watchGetAreaData),\n    _marked6 = _regeneratorRuntime.mark(watchGetCurrentData),\n    _marked7 = _regeneratorRuntime.mark(watchGetSensorData),\n    _marked8 = _regeneratorRuntime.mark(watchGetCubeData),\n    _marked9 = _regeneratorRuntime.mark(RoomDataSaga);\n\nimport { all, call, fork, takeEvery, put } from 'redux-saga/effects';\nimport { GET_AREA_DATA, GET_CUBE_DATA, GET_CURRENT_DATA, GET_SENSOR_DATA } from \"./constants\";\nimport { getAreaDataSuccess, getAreaDataFailed, getCurrentDataSuccess, getCurrentDataFailed, getSensorDataSuccess, getSensorDataFailed, getCubeDataSuccess, getCubeDataFailed } from \"./actions\";\nimport { requestApi } from 'helpers/api';\n\nfunction getAreaData(_ref) {\n  var _ref$payload, user, room_id, res;\n\n  return _regeneratorRuntime.wrap(function getAreaData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, user = _ref$payload.user, room_id = _ref$payload.room_id;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(requestApi, {\n            method: 'get',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/data/area',\n            params: {\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context.sent;\n\n          if (!(res.status === \"success\")) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(getAreaDataSuccess(res.result));\n\n        case 8:\n          _context.next = 12;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return put(getAreaDataFailed(res.result));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 18;\n          return put(getAreaDataFailed(_context.t0));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 14]]);\n}\n\nfunction getCurrentData(_ref2) {\n  var _ref2$payload, user, room_id, res;\n\n  return _regeneratorRuntime.wrap(function getCurrentData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, user = _ref2$payload.user, room_id = _ref2$payload.room_id;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(requestApi, {\n            method: 'get',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/data/current',\n            params: {\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context2.sent;\n\n          if (!(res.status === \"success\")) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 8;\n          return put(getCurrentDataSuccess(res.result));\n\n        case 8:\n          _context2.next = 12;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return put(getCurrentDataFailed(res.result));\n\n        case 12:\n          _context2.next = 18;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 18;\n          return put(getCurrentDataFailed(_context2.t0));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 14]]);\n}\n\nfunction getSensorData(_ref3) {\n  var _ref3$payload, user, room_id, res;\n\n  return _regeneratorRuntime.wrap(function getSensorData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, user = _ref3$payload.user, room_id = _ref3$payload.room_id;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(requestApi, {\n            method: 'get',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/data/sensor',\n            params: {\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context3.sent;\n\n          if (!(res.status === \"success\")) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 8;\n          return put(getSensorDataSuccess(res.result));\n\n        case 8:\n          _context3.next = 12;\n          break;\n\n        case 10:\n          _context3.next = 12;\n          return put(getSensorDataFailed(res.result));\n\n        case 12:\n          _context3.next = 18;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 18;\n          return put(getSensorDataFailed(_context3.t0));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 14]]);\n}\n\nfunction getCubeData(_ref4) {\n  var _ref4$payload, user, room_id, res;\n\n  return _regeneratorRuntime.wrap(function getCubeData$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, user = _ref4$payload.user, room_id = _ref4$payload.room_id;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(requestApi, {\n            method: 'get',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/data/getCubeData',\n            params: {\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context4.sent;\n\n          if (!(res.status === \"success\")) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(getCubeDataSuccess(res.result));\n\n        case 8:\n          _context4.next = 12;\n          break;\n\n        case 10:\n          _context4.next = 12;\n          return put(getCubeDataFailed(res.result));\n\n        case 12:\n          _context4.next = 18;\n          break;\n\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 18;\n          return put(getCubeDataFailed(_context4.t0));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 14]]);\n}\n\nfunction watchGetAreaData() {\n  return _regeneratorRuntime.wrap(function watchGetAreaData$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(GET_AREA_DATA, getAreaData);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchGetCurrentData() {\n  return _regeneratorRuntime.wrap(function watchGetCurrentData$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(GET_CURRENT_DATA, getCurrentData);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchGetSensorData() {\n  return _regeneratorRuntime.wrap(function watchGetSensorData$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(GET_SENSOR_DATA, getSensorData);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchGetCubeData() {\n  return _regeneratorRuntime.wrap(function watchGetCubeData$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(GET_CUBE_DATA, getCubeData);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction RoomDataSaga() {\n  return _regeneratorRuntime.wrap(function RoomDataSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchGetAreaData), fork(watchGetCurrentData), fork(watchGetSensorData), fork(watchGetCubeData)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default RoomDataSaga;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/roomData/saga.js"],"names":["getAreaData","getCurrentData","getSensorData","getCubeData","watchGetAreaData","watchGetCurrentData","watchGetSensorData","watchGetCubeData","RoomDataSaga","all","call","fork","takeEvery","put","GET_AREA_DATA","GET_CUBE_DATA","GET_CURRENT_DATA","GET_SENSOR_DATA","getAreaDataSuccess","getAreaDataFailed","getCurrentDataSuccess","getCurrentDataFailed","getSensorDataSuccess","getSensorDataFailed","getCubeDataSuccess","getCubeDataFailed","requestApi","payload","user","room_id","method","headers","accessToken","url","params","res","status","result"],"mappings":"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","sourcesContent":["import { all, call, fork, takeEvery, put } from 'redux-saga/effects';\r\n\r\nimport {\r\n    GET_AREA_DATA,\r\n    GET_CUBE_DATA,\r\n    GET_CURRENT_DATA,\r\n    GET_SENSOR_DATA,\r\n} from './constants';\r\n\r\nimport {\r\n    getAreaDataSuccess,\r\n    getAreaDataFailed,\r\n    getCurrentDataSuccess,\r\n    getCurrentDataFailed,\r\n    getSensorDataSuccess,\r\n    getSensorDataFailed,\r\n    getCubeDataSuccess,\r\n    getCubeDataFailed,\r\n} from './actions';\r\n\r\nimport {requestApi} from 'helpers/api'\r\n\r\nfunction* getAreaData({payload: {user, room_id}}){\r\n    try{\r\n        const res = yield call(requestApi,{\r\n            method: 'get',\r\n            headers: {\r\n                'x-access-token': user.accessToken\r\n            },\r\n            url: 'api/room/data/area',\r\n            params: {\r\n                room_id\r\n            }\r\n        });\r\n        if (res.status === \"success\"){\r\n            yield put(getAreaDataSuccess(res.result))\r\n        } else {\r\n            yield put(getAreaDataFailed(res.result))\r\n        }\r\n    } catch (error){\r\n        yield put(getAreaDataFailed(error))\r\n    }\r\n}\r\n\r\nfunction* getCurrentData({payload:{user, room_id}}){\r\n    try{\r\n        const res = yield call(requestApi,{\r\n            method: 'get',\r\n            headers: {\r\n                'x-access-token': user.accessToken\r\n            },\r\n            url: 'api/room/data/current',\r\n            params: {\r\n                room_id\r\n            }\r\n        });\r\n        if (res.status === \"success\"){\r\n            yield put(getCurrentDataSuccess(res.result))\r\n        } else {\r\n            yield put(getCurrentDataFailed(res.result))\r\n        }\r\n    } catch (error){\r\n        yield put(getCurrentDataFailed(error))\r\n    }\r\n}\r\nfunction* getSensorData({payload: {user, room_id}}){\r\n    try{\r\n        const res = yield call(requestApi,{\r\n            method: 'get',\r\n            headers: {\r\n                'x-access-token': user.accessToken\r\n            },\r\n            url: 'api/room/data/sensor',\r\n            params: {\r\n                room_id\r\n            }\r\n        });\r\n        if (res.status === \"success\"){\r\n            yield put(getSensorDataSuccess(res.result))\r\n        } else {\r\n            yield put(getSensorDataFailed(res.result))\r\n        }\r\n    } catch (error){\r\n        yield put(getSensorDataFailed(error))\r\n    }\r\n}\r\n\r\nfunction* getCubeData({payload: {user, room_id}}){\r\n    try{\r\n        const res = yield call(requestApi,{\r\n            method: 'get',\r\n            headers: {\r\n                'x-access-token': user.accessToken\r\n            },\r\n            url: 'api/room/data/getCubeData',\r\n            params: {\r\n                room_id\r\n            }\r\n        });\r\n        if (res.status === \"success\"){\r\n            yield put(getCubeDataSuccess(res.result))\r\n        } else {\r\n            yield put(getCubeDataFailed(res.result))\r\n        }\r\n    } catch (error){\r\n        yield put(getCubeDataFailed(error))\r\n    }\r\n}\r\n\r\n\r\nfunction * watchGetAreaData(){\r\n    yield takeEvery(GET_AREA_DATA, getAreaData);\r\n}\r\n\r\nfunction * watchGetCurrentData(){\r\n    yield takeEvery(GET_CURRENT_DATA, getCurrentData);\r\n}\r\n\r\nfunction * watchGetSensorData(){\r\n    yield takeEvery(GET_SENSOR_DATA, getSensorData);\r\n}\r\n\r\nfunction * watchGetCubeData(){\r\n    yield takeEvery(GET_CUBE_DATA, getCubeData);\r\n}\r\n\r\nfunction* RoomDataSaga(){\r\n    yield all([\r\n        fork(watchGetAreaData),\r\n        fork(watchGetCurrentData),\r\n        fork(watchGetSensorData),\r\n        fork(watchGetCubeData),\r\n    ])\r\n}\r\n\r\nexport default RoomDataSaga;"]},"metadata":{},"sourceType":"module"}