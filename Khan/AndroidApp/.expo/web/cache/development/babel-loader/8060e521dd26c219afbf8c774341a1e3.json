{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\ReactNative\\\\myapp\\\\node_modules\\\\expo-graphics\\\\lib\\\\GraphicsView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { AR } from 'expo';\nimport invariant from 'invariant';\nimport React from 'react';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport uuidv4 from 'uuid/v4';\nimport GLView from \"./GLView\";\n\nvar GraphicsView = function (_React$Component) {\n  _inherits(GraphicsView, _React$Component);\n\n  var _super = _createSuper(GraphicsView);\n\n  function GraphicsView() {\n    var _this;\n\n    _classCallCheck(this, GraphicsView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      appState: AppState.currentState,\n      id: uuidv4()\n    };\n\n    _this._renderErrorView = function (error) {\n      return React.createElement(View, {\n        style: styles.errorContainer,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, error));\n    };\n\n    _this.destroy = function () {\n      _this.gl = null;\n      _this.nativeRef = null;\n      cancelAnimationFrame(_this.rafID);\n    };\n\n    _this.handleAppStateChangeAsync = function (nextAppState) {\n      if (_this.state.appState.match(/inactive|background/) && nextAppState === 'active') {\n        var onShouldReloadContext = _this.props.onShouldReloadContext;\n\n        if (onShouldReloadContext && onShouldReloadContext()) {\n          _this.destroy();\n\n          _this.setState({\n            appState: nextAppState,\n            id: uuidv4()\n          });\n\n          return;\n        }\n      }\n\n      _this.setState({\n        appState: nextAppState\n      });\n    };\n\n    _this._saveNativeRef = function (ref) {\n      _this.nativeRef = ref;\n    };\n\n    _this._onLayout = function (_ref) {\n      var _ref$nativeEvent$layo = _ref.nativeEvent.layout,\n          x = _ref$nativeEvent$layo.x,\n          y = _ref$nativeEvent$layo.y,\n          width = _ref$nativeEvent$layo.width,\n          height = _ref$nativeEvent$layo.height;\n\n      if (!_this.gl) {\n        return;\n      }\n\n      if (_this.props.onResize) {\n        var scale = PixelRatio.get();\n\n        _this.props.onResize({\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          scale: scale,\n          pixelRatio: scale\n        });\n      }\n    };\n\n    _this._onContextCreate = function _callee(_ref2) {\n      var gl, props, _this$props, onContextCreate, onRender, lastFrameTime, render;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              gl = _ref2.gl, props = _objectWithoutProperties(_ref2, [\"gl\"]);\n              _this.gl = gl;\n              _this$props = _this.props, onContextCreate = _this$props.onContextCreate, onRender = _this$props.onRender;\n              invariant(onRender, 'expo-graphics: GraphicsView.onContextCreate(): `onRender` must be defined.');\n              invariant(onContextCreate, 'expo-graphics: GraphicsView.onContextCreate(): `onContextCreate` must be defined.');\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(onContextCreate(_objectSpread({\n                gl: gl\n              }, props)));\n\n            case 7:\n              render = function render() {\n                if (_this.gl) {\n                  var now = 0.001 * getNow();\n\n                  var _delta = typeof lastFrameTime !== 'undefined' ? now - lastFrameTime : 0.16666;\n\n                  _this.rafID = requestAnimationFrame(render);\n                  onRender(_delta);\n                  gl.endFrameEXP();\n                  lastFrameTime = now;\n                }\n              };\n\n              render();\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(GraphicsView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AppState.addEventListener('change', this.handleAppStateChangeAsync);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroy();\n      AppState.removeEventListener('change', this.handleAppStateChangeAsync);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isArEnabled = _this$props2.isArEnabled,\n          shouldIgnoreSafeGuards = _this$props2.shouldIgnoreSafeGuards,\n          style = _this$props2.style,\n          glviewStyle = _this$props2.glviewStyle;\n\n      if (!shouldIgnoreSafeGuards && isArEnabled) {\n        return this._renderErrorView(AR.getUnavailabilityReason());\n      }\n\n      return React.createElement(View, {\n        style: [styles.container, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, React.createElement(GLView, {\n        key: this.state.id,\n        onLayout: this._onLayout,\n        nativeRef_EXPERIMENTAL: this._saveNativeRef,\n        style: [styles.container, glviewStyle],\n        onContextCreate: this._onContextCreate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return GraphicsView;\n}(React.Component);\n\nGraphicsView.defaultProps = {\n  arRunningProps: {},\n  arCameraProps: {},\n  isShadowsEnabled: false\n};\nexport { GraphicsView as default };\nvar getNow = global.nativePerformanceNow || Date.now;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  errorContainer: {\n    backgroundColor: 'red',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["D:/ReactNative/myapp/node_modules/expo-graphics/lib/GraphicsView.js"],"names":["AR","invariant","React","uuidv4","GLView","GraphicsView","state","appState","AppState","currentState","id","_renderErrorView","error","styles","errorContainer","destroy","gl","nativeRef","cancelAnimationFrame","rafID","handleAppStateChangeAsync","nextAppState","match","onShouldReloadContext","props","setState","_saveNativeRef","ref","_onLayout","nativeEvent","layout","x","y","width","height","onResize","scale","PixelRatio","get","pixelRatio","_onContextCreate","onContextCreate","onRender","render","now","getNow","delta","lastFrameTime","requestAnimationFrame","endFrameEXP","addEventListener","removeEventListener","isArEnabled","shouldIgnoreSafeGuards","style","glviewStyle","getUnavailabilityReason","container","Component","defaultProps","arRunningProps","arCameraProps","isShadowsEnabled","global","nativePerformanceNow","Date","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,EAAT,QAAmB,MAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;;AAEA,OAAOC,MAAP,MAAmB,SAAnB;AAEA,OAAOC,MAAP;;IAwBqBC,Y;;;;;;;;;;;;;;;UAUnBC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAEC,QAAQ,CAACC,YADb;AAENC,MAAAA,EAAE,EAAEP,MAAM;AAFJ,K;;UAKRQ,gB,GAAmB,UAAAC,KAAK;AAAA,aACtB,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,KAAP,CADF,CADsB;AAAA,K;;UAexBG,O,GAAU,YAAM;AACd,YAAKC,EAAL,GAAU,IAAV;AACA,YAAKC,SAAL,GAAiB,IAAjB;AACAC,MAAAA,oBAAoB,CAAC,MAAKC,KAAN,CAApB;AACD,K;;UAEDC,yB,GAA4B,UAAAC,YAAY,EAAI;AAC1C,UAAI,MAAKf,KAAL,CAAWC,QAAX,CAAoBe,KAApB,CAA0B,qBAA1B,KAAoDD,YAAY,KAAK,QAAzE,EAAmF;AAAA,YAEzEE,qBAFyE,GAE/C,MAAKC,KAF0C,CAEzED,qBAFyE;;AAGjF,YAAIA,qBAAqB,IAAIA,qBAAqB,EAAlD,EAAsD;AACpD,gBAAKR,OAAL;;AACA,gBAAKU,QAAL,CAAc;AAAElB,YAAAA,QAAQ,EAAEc,YAAZ;AAA0BX,YAAAA,EAAE,EAAEP,MAAM;AAApC,WAAd;;AACA;AACD;AACF;;AACD,YAAKsB,QAAL,CAAc;AAAElB,QAAAA,QAAQ,EAAEc;AAAZ,OAAd;AACD,K;;UAsBDK,c,GAAiB,UAAAC,GAAG,EAAI;AACtB,YAAKV,SAAL,GAAiBU,GAAjB;AACD,K;;UAEDC,S,GAAY,gBAIN;AAAA,uCAHJC,WAGI,CAFFC,MAEE;AAAA,UAFQC,CAER,yBAFQA,CAER;AAAA,UAFWC,CAEX,yBAFWA,CAEX;AAAA,UAFcC,KAEd,yBAFcA,KAEd;AAAA,UAFqBC,MAErB,yBAFqBA,MAErB;;AACJ,UAAI,CAAC,MAAKlB,EAAV,EAAc;AACZ;AACD;;AACD,UAAI,MAAKQ,KAAL,CAAWW,QAAf,EAAyB;AACvB,YAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,EAAd;;AACA,cAAKd,KAAL,CAAWW,QAAX,CAAoB;AAAEJ,UAAAA,CAAC,EAADA,CAAF;AAAKC,UAAAA,CAAC,EAADA,CAAL;AAAQC,UAAAA,KAAK,EAALA,KAAR;AAAeC,UAAAA,MAAM,EAANA,MAAf;AAAuBE,UAAAA,KAAK,EAALA,KAAvB;AAA8BG,UAAAA,UAAU,EAAEH;AAA1C,SAApB;AACD;AACF,K;;UAEDI,gB,GAAmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASxB,cAAAA,EAAT,SAASA,EAAT,EAAgBQ,KAAhB;AACjB,oBAAKR,EAAL,GAAUA,EAAV;AADiB,4BAGqB,MAAKQ,KAH1B,EAGTiB,eAHS,eAGTA,eAHS,EAGQC,QAHR,eAGQA,QAHR;AAKjBzC,cAAAA,SAAS,CACPyC,QADO,EAEP,4EAFO,CAAT;AAIAzC,cAAAA,SAAS,CACPwC,eADO,EAEP,mFAFO,CAAT;AATiB;AAAA,+CAcXA,eAAe;AACnBzB,gBAAAA,EAAE,EAAFA;AADmB,iBAEhBQ,KAFgB,EAdJ;;AAAA;AAmBXmB,cAAAA,MAnBW,GAmBF,SAATA,MAAS,GAAM;AACnB,oBAAI,MAAK3B,EAAT,EAAa;AACX,sBAAM4B,GAAG,GAAG,QAAQC,MAAM,EAA1B;;AACA,sBAAMC,MAAK,GAAG,OAAOC,aAAP,KAAyB,WAAzB,GAAuCH,GAAG,GAAGG,aAA7C,GAA6D,OAA3E;;AACA,wBAAK5B,KAAL,GAAa6B,qBAAqB,CAACL,MAAD,CAAlC;AAEAD,kBAAAA,QAAQ,CAACI,MAAD,CAAR;AAEA9B,kBAAAA,EAAE,CAACiC,WAAH;AAEAF,kBAAAA,aAAa,GAAGH,GAAhB;AACD;AACF,eA/BgB;;AAgCjBD,cAAAA,MAAM;;AAhCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;wCAlEC;AAClBnC,MAAAA,QAAQ,CAAC0C,gBAAT,CAA0B,QAA1B,EAAoC,KAAK9B,yBAAzC;AACD;;;2CAEsB;AACrB,WAAKL,OAAL;AACAP,MAAAA,QAAQ,CAAC2C,mBAAT,CAA6B,QAA7B,EAAuC,KAAK/B,yBAA5C;AACD;;;6BAqBQ;AAAA,yBAC6D,KAAKI,KADlE;AAAA,UACC4B,WADD,gBACCA,WADD;AAAA,UACcC,sBADd,gBACcA,sBADd;AAAA,UACsCC,KADtC,gBACsCA,KADtC;AAAA,UAC6CC,WAD7C,gBAC6CA,WAD7C;;AAGP,UAAI,CAACF,sBAAD,IAA2BD,WAA/B,EAA4C;AAC1C,eAAO,KAAKzC,gBAAL,CAAsBX,EAAE,CAACwD,uBAAH,EAAtB,CAAP;AACD;;AAED,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC3C,MAAM,CAAC4C,SAAR,EAAmBH,KAAnB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAE,KAAKhD,KAAL,CAAWI,EADlB;AAEE,QAAA,QAAQ,EAAE,KAAKkB,SAFjB;AAGE,QAAA,sBAAsB,EAAE,KAAKF,cAH/B;AAIE,QAAA,KAAK,EAAE,CAACb,MAAM,CAAC4C,SAAR,EAAmBF,WAAnB,CAJT;AAKE,QAAA,eAAe,EAAE,KAAKf,gBALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAWD;;;;EAnEuCtC,KAAK,CAACwD,S;;AAA3BrD,Y,CAIZsD,Y,GAAe;AACpBC,EAAAA,cAAc,EAAE,EADI;AAEpBC,EAAAA,aAAa,EAAE,EAFK;AAGpBC,EAAAA,gBAAgB,EAAE;AAHE,C;SAJHzD,Y;AA2HrB,IAAMwC,MAAM,GAAGkB,MAAM,CAACC,oBAAP,IAA+BC,IAAI,CAACrB,GAAnD;AAEA,IAAM/B,MAAM,GAAGqD,UAAU,CAACC,MAAX,CAAkB;AAC/BV,EAAAA,SAAS,EAAE;AACTW,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BtD,EAAAA,cAAc,EAAE;AACduD,IAAAA,eAAe,EAAE,KADH;AAEdD,IAAAA,IAAI,EAAE,CAFQ;AAGdE,IAAAA,cAAc,EAAE,QAHF;AAIdC,IAAAA,UAAU,EAAE;AAJE;AAJe,CAAlB,CAAf","sourcesContent":["// @flow\nimport { AR } from 'expo';\nimport invariant from 'invariant';\nimport React from 'react';\nimport { AppState, PixelRatio, StyleSheet, Text, View } from 'react-native';\nimport uuidv4 from 'uuid/v4';\n\nimport GLView from './GLView';\n\n// import AR from '../__tests__/AR.mock';\ntype Layout = {\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  scale: number,\n};\n\ntype Props = {\n  isArEnabled?: ?boolean,\n  isArRunningStateEnabled?: ?boolean,\n  arRunningProps?: ?object,\n  arCameraProps?: ?object,\n  isShadowsEnabled?: ?boolean,\n  onShouldReloadContext?: () => boolean,\n  onRender: (delta: number) => void,\n  onContextCreate?: (props: *) => void,\n  onResize?: (layout: Layout) => void,\n  shouldIgnoreSafeGuards?: ?boolean,\n} & React.ElementProps<typeof GLView>;\n\nexport default class GraphicsView extends React.Component<Props> {\n  nativeRef: ?GLView.NativeView;\n  gl: ?any;\n\n  static defaultProps = {\n    arRunningProps: {},\n    arCameraProps: {},\n    isShadowsEnabled: false,\n  };\n\n  state = {\n    appState: AppState.currentState,\n    id: uuidv4(),\n  };\n\n  _renderErrorView = error => (\n    <View style={styles.errorContainer}>\n      <Text>{error}</Text>\n    </View>\n  );\n\n  componentDidMount() {\n    AppState.addEventListener('change', this.handleAppStateChangeAsync);\n  }\n\n  componentWillUnmount() {\n    this.destroy();\n    AppState.removeEventListener('change', this.handleAppStateChangeAsync);\n  }\n\n  destroy = () => {\n    this.gl = null;\n    this.nativeRef = null;\n    cancelAnimationFrame(this.rafID);\n  };\n\n  handleAppStateChangeAsync = nextAppState => {\n    if (this.state.appState.match(/inactive|background/) && nextAppState === 'active') {\n      // console.log('App has come to the foreground!')\n      const { onShouldReloadContext } = this.props;\n      if (onShouldReloadContext && onShouldReloadContext()) {\n        this.destroy();\n        this.setState({ appState: nextAppState, id: uuidv4() });\n        return;\n      }\n    }\n    this.setState({ appState: nextAppState });\n  };\n\n  render() {\n    const { isArEnabled, shouldIgnoreSafeGuards, style, glviewStyle } = this.props;\n\n    if (!shouldIgnoreSafeGuards && isArEnabled) {\n      return this._renderErrorView(AR.getUnavailabilityReason());\n    }\n\n    return (\n      <View style={[styles.container, style]}>\n        <GLView\n          key={this.state.id}\n          onLayout={this._onLayout}\n          nativeRef_EXPERIMENTAL={this._saveNativeRef}\n          style={[styles.container, glviewStyle]}\n          onContextCreate={this._onContextCreate}\n        />\n      </View>\n    );\n  }\n\n  _saveNativeRef = ref => {\n    this.nativeRef = ref;\n  };\n\n  _onLayout = ({\n    nativeEvent: {\n      layout: { x, y, width, height },\n    },\n  }) => {\n    if (!this.gl) {\n      return;\n    }\n    if (this.props.onResize) {\n      const scale = PixelRatio.get();\n      this.props.onResize({ x, y, width, height, scale, pixelRatio: scale });\n    }\n  };\n\n  _onContextCreate = async ({ gl, ...props }) => {\n    this.gl = gl;\n\n    const { onContextCreate, onRender } = this.props;\n\n    invariant(\n      onRender,\n      'expo-graphics: GraphicsView.onContextCreate(): `onRender` must be defined.'\n    );\n    invariant(\n      onContextCreate,\n      'expo-graphics: GraphicsView.onContextCreate(): `onContextCreate` must be defined.'\n    );\n\n    await onContextCreate({\n      gl,\n      ...props,\n    });\n    let lastFrameTime;\n    const render = () => {\n      if (this.gl) {\n        const now = 0.001 * getNow();\n        const delta = typeof lastFrameTime !== 'undefined' ? now - lastFrameTime : 0.16666;\n        this.rafID = requestAnimationFrame(render);\n\n        onRender(delta);\n        // NOTE: At the end of each frame, notify `Expo.GLView` with the below\n        gl.endFrameEXP();\n\n        lastFrameTime = now;\n      }\n    };\n    render();\n  };\n}\n\nconst getNow = global.nativePerformanceNow || Date.now;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  errorContainer: {\n    backgroundColor: 'red',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}