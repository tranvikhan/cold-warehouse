{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(login),\n    _marked2 = _regeneratorRuntime.mark(logout),\n    _marked3 = _regeneratorRuntime.mark(register),\n    _marked4 = _regeneratorRuntime.mark(forgetPassword),\n    _marked5 = _regeneratorRuntime.mark(watchLoginUser),\n    _marked6 = _regeneratorRuntime.mark(watchLogoutUser),\n    _marked7 = _regeneratorRuntime.mark(watchRegisterUser),\n    _marked8 = _regeneratorRuntime.mark(watchForgetPassword),\n    _marked9 = _regeneratorRuntime.mark(authSaga);\n\nimport { Cookies } from \"react-cookie\";\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { requestApi } from \"helpers/api\";\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER, FORGET_PASSWORD, LOGIN_USER_SUCCESS } from \"./constants\";\nimport { loginUserSuccess, loginUserFailed, registerUserSuccess, registerUserFailed, forgetPasswordSuccess, forgetPasswordFailed, setCurrentRoom, getCurrentRoomInfoFailed } from \"redux/actions\";\nimport { getNotificationListFailed } from \"redux/notification/actions\";\nimport { getAreaDataFailed, getCubeDataFailed, getCurrentDataFailed, getSensorDataFailed } from \"redux/roomData/actions\";\n\nvar setSession = function setSession(user) {\n  var cookies = new Cookies();\n\n  if (user) {\n    cookies.set(\"user\", JSON.stringify(user), {\n      path: \"/\"\n    });\n  } else {\n    cookies.remove(\"user\", {\n      path: \"/\"\n    });\n  }\n};\n\nfunction login(_ref) {\n  var _ref$payload, username, password, options, response;\n\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, username = _ref$payload.username, password = _ref$payload.password;\n          options = {\n            method: \"post\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            data: {\n              username: username,\n              password: password\n            },\n            url: \"api/auth/signin\"\n          };\n          _context.prev = 2;\n          _context.next = 5;\n          return call(requestApi, options);\n\n        case 5:\n          response = _context.sent;\n\n          if (!(response.status === \"success\")) {\n            _context.next = 26;\n            break;\n          }\n\n          setSession(response.result);\n          _context.next = 10;\n          return put(loginUserSuccess(response.result));\n\n        case 10:\n          _context.next = 12;\n          return put(setCurrentRoom(null));\n\n        case 12:\n          _context.next = 14;\n          return put(getNotificationListFailed(null));\n\n        case 14:\n          _context.next = 16;\n          return put(getAreaDataFailed(null));\n\n        case 16:\n          _context.next = 18;\n          return put(getCurrentDataFailed(null));\n\n        case 18:\n          _context.next = 20;\n          return put(getSensorDataFailed(null));\n\n        case 20:\n          _context.next = 22;\n          return put(getCubeDataFailed(null));\n\n        case 22:\n          _context.next = 24;\n          return put(getCurrentRoomInfoFailed(null));\n\n        case 24:\n          _context.next = 29;\n          break;\n\n        case 26:\n          setSession(null);\n          _context.next = 29;\n          return put(loginUserFailed(response.result));\n\n        case 29:\n          _context.next = 36;\n          break;\n\n        case 31:\n          _context.prev = 31;\n          _context.t0 = _context[\"catch\"](2);\n          setSession(null);\n          _context.next = 36;\n          return put(loginUserFailed(_context.t0));\n\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 31]]);\n}\n\nfunction logout(_ref2) {\n  var history;\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          history = _ref2.payload.history;\n          _context2.prev = 1;\n          setSession(null);\n          _context2.next = 5;\n          return put(setCurrentRoom(null));\n\n        case 5:\n          _context2.next = 7;\n          return put(getNotificationListFailed(null));\n\n        case 7:\n          _context2.next = 9;\n          return put(getAreaDataFailed(null));\n\n        case 9:\n          _context2.next = 11;\n          return put(getCurrentDataFailed(null));\n\n        case 11:\n          _context2.next = 13;\n          return put(getSensorDataFailed(null));\n\n        case 13:\n          _context2.next = 15;\n          return put(getCubeDataFailed(null));\n\n        case 15:\n          _context2.next = 17;\n          return put(getCurrentRoomInfoFailed(null));\n\n        case 17:\n          _context2.next = 19;\n          return call(function () {\n            history.push(\"/account/login\");\n          });\n\n        case 19:\n          _context2.next = 23;\n          break;\n\n        case 21:\n          _context2.prev = 21;\n          _context2.t0 = _context2[\"catch\"](1);\n\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 21]]);\n}\n\nfunction register(_ref3) {\n  var _ref3$payload, username, email, password, options, response;\n\n  return _regeneratorRuntime.wrap(function register$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, username = _ref3$payload.username, email = _ref3$payload.email, password = _ref3$payload.password;\n          options = {\n            method: \"post\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            data: {\n              username: username,\n              password: password,\n              email: email\n            },\n            url: \"api/auth/signup\"\n          };\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(requestApi, options);\n\n        case 5:\n          response = _context3.sent;\n\n          if (!(response.status === \"success\")) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.next = 9;\n          return put(registerUserSuccess(response.result));\n\n        case 9:\n          _context3.next = 13;\n          break;\n\n        case 11:\n          _context3.next = 13;\n          return put(registerUserFailed(response.result));\n\n        case 13:\n          _context3.next = 19;\n          break;\n\n        case 15:\n          _context3.prev = 15;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 19;\n          return put(registerUserFailed(\"Erro\"));\n\n        case 19:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 15]]);\n}\n\nfunction forgetPassword(_ref4) {\n  var _ref4$payload, email, username, options, response;\n\n  return _regeneratorRuntime.wrap(function forgetPassword$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, email = _ref4$payload.email, username = _ref4$payload.username;\n          options = {\n            method: \"post\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            data: {\n              email: email,\n              username: username\n            },\n            url: \"api/user/forgotPassword\"\n          };\n          _context4.prev = 2;\n          _context4.next = 5;\n          return call(requestApi, options);\n\n        case 5:\n          response = _context4.sent;\n\n          if (!(response.status === \"success\")) {\n            _context4.next = 11;\n            break;\n          }\n\n          _context4.next = 9;\n          return put(forgetPasswordSuccess(response.result));\n\n        case 9:\n          _context4.next = 13;\n          break;\n\n        case 11:\n          _context4.next = 13;\n          return put(forgetPasswordFailed(response.result));\n\n        case 13:\n          _context4.next = 19;\n          break;\n\n        case 15:\n          _context4.prev = 15;\n          _context4.t0 = _context4[\"catch\"](2);\n          _context4.next = 19;\n          return put(forgetPasswordFailed(_context4.t0));\n\n        case 19:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 15]]);\n}\n\nexport function watchLoginUser() {\n  return _regeneratorRuntime.wrap(function watchLoginUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(LOGIN_USER, login);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function watchLogoutUser() {\n  return _regeneratorRuntime.wrap(function watchLogoutUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOGOUT_USER, logout);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function watchRegisterUser() {\n  return _regeneratorRuntime.wrap(function watchRegisterUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(REGISTER_USER, register);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function watchForgetPassword() {\n  return _regeneratorRuntime.wrap(function watchForgetPassword$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(FORGET_PASSWORD, forgetPassword);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction authSaga() {\n  return _regeneratorRuntime.wrap(function authSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoginUser), fork(watchLogoutUser), fork(watchRegisterUser), fork(watchForgetPassword)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/auth/saga.js"],"names":["login","logout","register","forgetPassword","watchLoginUser","watchLogoutUser","watchRegisterUser","watchForgetPassword","authSaga","Cookies","all","call","fork","put","takeEvery","requestApi","LOGIN_USER","LOGOUT_USER","REGISTER_USER","FORGET_PASSWORD","LOGIN_USER_SUCCESS","loginUserSuccess","loginUserFailed","registerUserSuccess","registerUserFailed","forgetPasswordSuccess","forgetPasswordFailed","setCurrentRoom","getCurrentRoomInfoFailed","getNotificationListFailed","getAreaDataFailed","getCubeDataFailed","getCurrentDataFailed","getSensorDataFailed","setSession","user","cookies","set","JSON","stringify","path","remove","payload","username","password","options","method","headers","data","url","response","status","result","history","push","email"],"mappings":"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","sourcesContent":["// @flow\r\nimport { Cookies } from \"react-cookie\";\r\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\r\n\r\nimport { requestApi } from \"helpers/api\";\r\n\r\nimport {\r\n  LOGIN_USER,\r\n  LOGOUT_USER,\r\n  REGISTER_USER,\r\n  FORGET_PASSWORD,\r\n  LOGIN_USER_SUCCESS,\r\n} from \"./constants\";\r\n\r\nimport {\r\n  loginUserSuccess,\r\n  loginUserFailed,\r\n  registerUserSuccess,\r\n  registerUserFailed,\r\n  forgetPasswordSuccess,\r\n  forgetPasswordFailed,\r\n  setCurrentRoom,\r\n  getCurrentRoomInfoFailed,\r\n} from \"redux/actions\";\r\nimport { getNotificationListFailed } from \"redux/notification/actions\";\r\nimport {\r\n  getAreaDataFailed,\r\n  getCubeDataFailed,\r\n  getCurrentDataFailed,\r\n  getSensorDataFailed,\r\n} from \"redux/roomData/actions\";\r\n\r\n/**\r\n * Sets the session\r\n * @param {*} user\r\n */\r\nconst setSession = (user) => {\r\n  let cookies = new Cookies();\r\n  if (user) {\r\n    cookies.set(\"user\", JSON.stringify(user), { path: \"/\" });\r\n  } else {\r\n    cookies.remove(\"user\", { path: \"/\" });\r\n  }\r\n};\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */\r\nfunction* login({ payload: { username, password } }) {\r\n  const options = {\r\n    method: \"post\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data: { username, password },\r\n    url: \"api/auth/signin\",\r\n  };\r\n  try {\r\n    const response = yield call(requestApi, options);\r\n    if (response.status === \"success\") {\r\n      setSession(response.result);\r\n      yield put(loginUserSuccess(response.result));\r\n\r\n      yield put(setCurrentRoom(null));\r\n      yield put(getNotificationListFailed(null));\r\n      yield put(getAreaDataFailed(null));\r\n      yield put(getCurrentDataFailed(null));\r\n      yield put(getSensorDataFailed(null));\r\n      yield put(getCubeDataFailed(null));\r\n      yield put(getCurrentRoomInfoFailed(null));\r\n    } else {\r\n      setSession(null);\r\n      yield put(loginUserFailed(response.result)); //message\r\n    }\r\n  } catch (error) {\r\n    setSession(null);\r\n    yield put(loginUserFailed(error)); //message\r\n  }\r\n}\r\n\r\n/**\r\n * Logout the user\r\n * @param {*} param0\r\n */\r\nfunction* logout({ payload: { history } }) {\r\n  try {\r\n    setSession(null);\r\n    yield put(setCurrentRoom(null));\r\n    yield put(getNotificationListFailed(null));\r\n    yield put(getAreaDataFailed(null));\r\n    yield put(getCurrentDataFailed(null));\r\n    yield put(getSensorDataFailed(null));\r\n    yield put(getCubeDataFailed(null));\r\n    yield put(getCurrentRoomInfoFailed(null));\r\n    yield call(() => {\r\n      history.push(\"/account/login\");\r\n    });\r\n  } catch (error) {}\r\n}\r\n\r\n/**\r\n * Register the user\r\n */\r\nfunction* register({ payload: { username, email, password } }) {\r\n  const options = {\r\n    method: \"post\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data: { username, password, email },\r\n    url: \"api/auth/signup\",\r\n  };\r\n\r\n  try {\r\n    const response = yield call(requestApi, options);\r\n    if (response.status === \"success\") {\r\n      yield put(registerUserSuccess(response.result));\r\n    } else {\r\n      yield put(registerUserFailed(response.result));\r\n    }\r\n  } catch (error) {\r\n    yield put(registerUserFailed(\"Erro\"));\r\n  }\r\n}\r\n\r\n/**\r\n * forget password\r\n */\r\nfunction* forgetPassword({ payload: { email, username } }) {\r\n  const options = {\r\n    method: \"post\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data: { email, username },\r\n    url: \"api/user/forgotPassword\",\r\n  };\r\n  try {\r\n    const response = yield call(requestApi, options);\r\n    if (response.status === \"success\") {\r\n      yield put(forgetPasswordSuccess(response.result));\r\n    } else {\r\n      yield put(forgetPasswordFailed(response.result)); //message\r\n    }\r\n  } catch (error) {\r\n    yield put(forgetPasswordFailed(error)); //message\r\n  }\r\n}\r\n\r\nexport function* watchLoginUser() {\r\n  yield takeEvery(LOGIN_USER, login);\r\n}\r\nexport function* watchLogoutUser() {\r\n  yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchRegisterUser() {\r\n  yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport function* watchForgetPassword() {\r\n  yield takeEvery(FORGET_PASSWORD, forgetPassword);\r\n}\r\n\r\nfunction* authSaga() {\r\n  yield all([\r\n    fork(watchLoginUser),\r\n    fork(watchLogoutUser),\r\n    fork(watchRegisterUser),\r\n    fork(watchForgetPassword),\r\n  ]);\r\n}\r\n\r\nexport default authSaga;\r\n"]},"metadata":{},"sourceType":"module"}