{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\ReactNative\\\\myapp\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport * as eva from '@eva-design/eva';\nimport { ApplicationProvider, IconRegistry } from '@ui-kitten/components';\nimport AppNavigator from \"./src/Navigators/app.navigator\";\nimport { default as theme } from \"./src/assets/theme/custom-theme.json\";\nimport { EvaIconsPack } from '@ui-kitten/eva-icons';\nimport { ThemeContext } from \"./src/assets/theme/theme-context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { useStyleSheet, StyleService } from '@ui-kitten/components';\nimport { enableScreens } from 'react-native-screens';\nexport default function App() {\n  var _useState = useState('light'),\n      _useState2 = _slicedToArray(_useState, 2),\n      themeDefault = _useState2[0],\n      setTheme = _useState2[1];\n\n  var styles = useStyleSheet(mainStyle);\n\n  var toggleTheme = function toggleTheme() {\n    var nextTheme = themeDefault === 'light' ? 'dark' : 'light';\n    setTheme(nextTheme);\n  };\n\n  enableScreens();\n  return React.createElement(React.Fragment, null, React.createElement(IconRegistry, {\n    icons: EvaIconsPack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), React.createElement(ThemeContext.Provider, {\n    value: {\n      themeDefault: themeDefault,\n      toggleTheme: toggleTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, React.createElement(ApplicationProvider, _extends({}, eva, {\n    theme: _objectSpread(_objectSpread({}, eva[themeDefault]), {}, {\n      theme: theme\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), React.createElement(SafeAreaView, {\n    style: styles.droidSafeArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, React.createElement(AppNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  })))));\n}\nvar mainStyle = StyleService.create({\n  droidSafeArea: {\n    flex: 1,\n    backgroundColor: '#2c3e50',\n    paddingTop: Platform.OS === 'android' ? 25 : 0\n  }\n});","map":{"version":3,"sources":["D:/ReactNative/myapp/App.js"],"names":["React","useState","eva","ApplicationProvider","IconRegistry","AppNavigator","default","theme","EvaIconsPack","ThemeContext","useStyleSheet","StyleService","enableScreens","App","themeDefault","setTheme","styles","mainStyle","toggleTheme","nextTheme","droidSafeArea","create","flex","backgroundColor","paddingTop","Platform","OS"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,mBAAT,EAA6BC,YAA7B,QAAgD,uBAAhD;AACA,OAAOC,YAAP;AACA,SAASC,OAAO,IAAIC,KAApB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,YAAT;;;AAEA,SAASC,aAAT,EAAwBC,YAAxB,QAA2C,uBAA3C;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACOZ,QAAQ,CAAC,OAAD,CADf;AAAA;AAAA,MACnBa,YADmB;AAAA,MACLC,QADK;;AAE1B,MAAMC,MAAM,GAAGN,aAAa,CAACO,SAAD,CAA5B;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,SAAS,GAAGL,YAAY,KAAK,OAAjB,GAA2B,MAA3B,GAAoC,OAAtD;AACAC,IAAAA,QAAQ,CAACI,SAAD,CAAR;AACD,GAHD;;AAKAP,EAAAA,aAAa;AAEd,SACE,0CACC,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEJ,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEM,MAAAA,YAAY,EAAZA,YAAF;AAAgBI,MAAAA,WAAW,EAAXA;AAAhB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD,eAAyBhB,GAAzB;AAA8B,IAAA,KAAK,kCAAOA,GAAG,CAACY,YAAD,CAAV;AAAyBP,MAAAA,KAAK,EAALA;AAAzB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAES,MAAM,CAACI,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAFD,CADF;AAYF;AACD,IAAMH,SAAS,GAAEN,YAAY,CAACU,MAAb,CAAoB;AACnCD,EAAAA,aAAa,EAAE;AACXE,IAAAA,IAAI,EAAE,CADK;AAEXC,IAAAA,eAAe,EAAC,SAFL;AAGXC,IAAAA,UAAU,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC;AAHlC;AADoB,CAApB,CAAjB","sourcesContent":["import React,{useState} from \"react\";\nimport * as eva from '@eva-design/eva';\nimport { ApplicationProvider,IconRegistry} from '@ui-kitten/components';\nimport AppNavigator from './src/Navigators/app.navigator';\nimport { default as theme } from './src/assets/theme/custom-theme.json';\nimport { EvaIconsPack } from '@ui-kitten/eva-icons';\nimport { ThemeContext } from './src/assets/theme/theme-context';\nimport { Platform, SafeAreaView } from 'react-native';\nimport { useStyleSheet ,StyleService} from '@ui-kitten/components';\nimport { enableScreens } from 'react-native-screens';\n\n\nexport default function App() {\n    const [themeDefault, setTheme] = useState('light');\n    const styles = useStyleSheet(mainStyle);\n    const toggleTheme = () => {\n      const nextTheme = themeDefault === 'light' ? 'dark' : 'light';\n      setTheme(nextTheme);\n    };\n\n    enableScreens();\n\n   return(\n     <>\n      <IconRegistry icons={EvaIconsPack}/>\n      <ThemeContext.Provider value={{ themeDefault, toggleTheme }}>\n        <ApplicationProvider {...eva} theme={{ ...eva[themeDefault],theme}}>\n          <SafeAreaView style={styles.droidSafeArea}>\n            <AppNavigator />\n          </SafeAreaView>\n        </ApplicationProvider>\n      </ThemeContext.Provider>\n      </>\n    );\n}\nconst mainStyle= StyleService.create({\n  droidSafeArea: {\n      flex: 1,\n      backgroundColor:'#2c3e50',\n      paddingTop: Platform.OS === 'android' ? 25 : 0\n  },\n});\n"]},"metadata":{},"sourceType":"module"}