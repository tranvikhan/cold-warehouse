{"ast":null,"code":"var _jsxFileName = \"D:\\\\GIT HUB\\\\NCKH2020\\\\KHAN\\\\AndroidApp\\\\src\\\\Navigators\\\\app.navigator.js\";\nimport React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport AuthNavigator from \"./auth.navigator\";\nimport MainNavigator from \"./main.navigator\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getRoomList, getCurrentRoomInfo, getNotificationList, getAreaData, getCurrentData, getSensorData, getCubeData, getRoomStructure, getUserAccess, getActivates, getAreas, getAreaDataFailed, getCurrentDataFailed, getSensorDataFailed, getCubeDataFailed, getRoomStructureFailed, getUserAccessFailed, getActivatesFailed, getAreasFailed, getAreaDataSuccess, getCubeDataSuccess, getCurrentDataSuccess, updateRoomSuccess, pushNotification, updateNotification, getSensorDataSuccess, deleteRoomSuccess, addSensorSuccess, deleteSensorSuccess, updateSensorSuccess, updateAccessSuccess, AddAccessSuccess, deleteAccessSuccess } from \"../redux/actions\";\n\nvar io = require(\"socket.io-client\");\n\nvar _require = require(\"../constants/apiConfig\"),\n    BASE_URL = _require.BASE_URL;\n\nfunction AppNavigator(props) {\n  var state = useSelector(function (state) {\n    return state.Auth;\n  });\n  var currentRoom = useSelector(function (state) {\n    return state.RoomList.currentRoom;\n  });\n  var webSocket = React.useRef(null);\n  var dispatch = useDispatch();\n\n  var checkDispatch = function checkDispatch(room_id, action) {\n    if (currentRoom && currentRoom.room._id === room_id) {\n      dispatch(action);\n      console.log(\"DISPACH\");\n    }\n  };\n\n  var checkAnoUserAction = function checkAnoUserAction(room_id, actionBy, action) {\n    if (currentRoom && currentRoom.room._id === room_id && actionBy != state.user.user._id) {\n      dispatch(action);\n    }\n  };\n\n  React.useEffect(function () {\n    if (currentRoom && state.user && currentRoom.room._id) {\n      console.log(currentRoom, \"sad\");\n      dispatch(getAreaDataFailed(null));\n      dispatch(getCurrentDataFailed(null));\n      dispatch(getSensorDataFailed(null));\n      dispatch(getCubeDataFailed(null));\n      dispatch(getRoomStructureFailed(null));\n      dispatch(getUserAccessFailed(null));\n      dispatch(getActivatesFailed(null));\n      dispatch(getAreasFailed(null));\n      dispatch(getCurrentRoomInfo(state.user, currentRoom.room._id));\n      dispatch(getAreaData(state.user, currentRoom.room._id));\n      dispatch(getCurrentData(state.user, currentRoom.room._id));\n      dispatch(getSensorData(state.user, currentRoom.room._id));\n      dispatch(getCubeData(state.user, currentRoom.room._id));\n      dispatch(getRoomStructure(state.user, currentRoom.room._id));\n      dispatch(getUserAccess(state.user, currentRoom.room._id));\n      dispatch(getActivates(state.user, currentRoom.room._id));\n      dispatch(getAreas(state.user, currentRoom.room._id));\n    }\n  }, [currentRoom]);\n  React.useEffect(function () {\n    if (state.user) {\n      if (!currentRoom) {\n        dispatch(getRoomList(state.user));\n        dispatch(getNotificationList(state.user));\n      }\n\n      if (currentRoom) {\n        if (webSocket.current) webSocket.current.disconnect();\n        webSocket.current = io.connect(BASE_URL);\n        console.log(\"Connect\");\n        var socket = webSocket.current;\n        console.log(\"Socket io Client run socket client with room: \", currentRoom.room._id);\n        socket.on(\"connect\", function () {\n          console.log(\"Socket io Client  Connected\");\n          socket.emit(\"login\", state.user.accessToken);\n        });\n        socket.on(\"data_cube_room\", function (data) {\n          checkDispatch(data.room, getCubeDataSuccess(data));\n          console.log(\"Socket io Client Cube\");\n        });\n        socket.on(\"data_sensor\", function (data) {\n          checkDispatch(data.room, getSensorDataSuccess(data));\n          console.log(\"Socket io Client Sensor\");\n        });\n        socket.on(\"data_room\", function (data) {\n          checkDispatch(data.room, getCurrentDataSuccess(data));\n          console.log(\"Socket io Client Curent Data\");\n        });\n        socket.on(\"log\", function (data) {\n          console.log(\"Socket io Client Log\", data);\n        });\n        socket.on(\"data_area\", function (data) {\n          checkDispatch(data.room, getAreaDataSuccess(data));\n          console.log(\"Socket io Client Area\");\n        });\n        socket.on(\"notification\", function (data) {\n          if (data.message == \"add\") {\n            dispatch(pushNotification(data.data));\n          }\n\n          if (data.message == \"update\") {\n            dispatch(updateNotification(data.data._id, data.data));\n          }\n\n          console.log(\"Socket io Client Notification\");\n        });\n        socket.on(\"disconnect\", function () {});\n      }\n    } else {\n      console.log(\"Disconnect\");\n      if (webSocket.current) webSocket.current.disconnect();\n      webSocket.current = null;\n    }\n\n    return function () {\n      console.log(\"Disconnect\");\n      if (webSocket.current) webSocket.current.disconnect();\n      webSocket.current = null;\n    };\n  }, [state.user, currentRoom]);\n  return React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }\n  }, !state.user ? React.createElement(AuthNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 22\n    }\n  }) : React.createElement(MainNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 42\n    }\n  }));\n}\n\nexport default AppNavigator;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/Navigators/app.navigator.js"],"names":["React","NavigationContainer","AuthNavigator","MainNavigator","useSelector","useDispatch","getRoomList","getCurrentRoomInfo","getNotificationList","getAreaData","getCurrentData","getSensorData","getCubeData","getRoomStructure","getUserAccess","getActivates","getAreas","getAreaDataFailed","getCurrentDataFailed","getSensorDataFailed","getCubeDataFailed","getRoomStructureFailed","getUserAccessFailed","getActivatesFailed","getAreasFailed","getAreaDataSuccess","getCubeDataSuccess","getCurrentDataSuccess","updateRoomSuccess","pushNotification","updateNotification","getSensorDataSuccess","deleteRoomSuccess","addSensorSuccess","deleteSensorSuccess","updateSensorSuccess","updateAccessSuccess","AddAccessSuccess","deleteAccessSuccess","io","require","BASE_URL","AppNavigator","props","state","Auth","currentRoom","RoomList","webSocket","useRef","dispatch","checkDispatch","room_id","action","room","_id","console","log","checkAnoUserAction","actionBy","user","useEffect","current","disconnect","connect","socket","on","emit","accessToken","data","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,WADF,EAEEC,kBAFF,EAGEC,mBAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,aANF,EAOEC,WAPF,EAQEC,gBARF,EASEC,aATF,EAUEC,YAVF,EAWEC,QAXF,EAYEC,iBAZF,EAaEC,oBAbF,EAcEC,mBAdF,EAeEC,iBAfF,EAgBEC,sBAhBF,EAiBEC,mBAjBF,EAkBEC,kBAlBF,EAmBEC,cAnBF,EAoBEC,kBApBF,EAqBEC,kBArBF,EAsBEC,qBAtBF,EAuBEC,iBAvBF,EAwBEC,gBAxBF,EAyBEC,kBAzBF,EA0BEC,oBA1BF,EA2BEC,iBA3BF,EA4BEC,gBA5BF,EA6BEC,mBA7BF,EA8BEC,mBA9BF,EA+BEC,mBA/BF,EAgCEC,gBAhCF,EAiCEC,mBAjCF;;AAmCA,IAAIC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAhB;;eACqBA,OAAO,0B;IAApBC,Q,YAAAA,Q;;AAER,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAMC,KAAK,GAAGxC,WAAW,CAAC,UAACwC,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAzB;AACA,MAAMC,WAAW,GAAG1C,WAAW,CAAC,UAACwC,KAAD;AAAA,WAAWA,KAAK,CAACG,QAAN,CAAeD,WAA1B;AAAA,GAAD,CAA/B;AACA,MAAME,SAAS,GAAGhD,KAAK,CAACiD,MAAN,CAAa,IAAb,CAAlB;AACA,MAAMC,QAAQ,GAAG7C,WAAW,EAA5B;;AACA,MAAM8C,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,MAAV,EAAqB;AACzC,QAAIP,WAAW,IAAIA,WAAW,CAACQ,IAAZ,CAAiBC,GAAjB,KAAyBH,OAA5C,EAAqD;AACnDF,MAAAA,QAAQ,CAACG,MAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,GALD;;AAOA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACN,OAAD,EAAUO,QAAV,EAAoBN,MAApB,EAA+B;AACxD,QACEP,WAAW,IACXA,WAAW,CAACQ,IAAZ,CAAiBC,GAAjB,KAAyBH,OADzB,IAEAO,QAAQ,IAAIf,KAAK,CAACgB,IAAN,CAAWA,IAAX,CAAgBL,GAH9B,EAIE;AACAL,MAAAA,QAAQ,CAACG,MAAD,CAAR;AACD;AACF,GARD;;AAUArD,EAAAA,KAAK,CAAC6D,SAAN,CAAgB,YAAM;AACpB,QAAIf,WAAW,IAAIF,KAAK,CAACgB,IAArB,IAA6Bd,WAAW,CAACQ,IAAZ,CAAiBC,GAAlD,EAAuD;AACrDC,MAAAA,OAAO,CAACC,GAAR,CAAYX,WAAZ,EAAyB,KAAzB;AAEAI,MAAAA,QAAQ,CAACjC,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACAiC,MAAAA,QAAQ,CAAChC,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACAgC,MAAAA,QAAQ,CAAC/B,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACA+B,MAAAA,QAAQ,CAAC9B,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AAEA8B,MAAAA,QAAQ,CAAC7B,sBAAsB,CAAC,IAAD,CAAvB,CAAR;AACA6B,MAAAA,QAAQ,CAAC5B,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACA4B,MAAAA,QAAQ,CAAC3B,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACA2B,MAAAA,QAAQ,CAAC1B,cAAc,CAAC,IAAD,CAAf,CAAR;AAIA0B,MAAAA,QAAQ,CAAC3C,kBAAkB,CAACqC,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAnB,CAAR;AAEAL,MAAAA,QAAQ,CAACzC,WAAW,CAACmC,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAZ,CAAR;AACAL,MAAAA,QAAQ,CAACxC,cAAc,CAACkC,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAf,CAAR;AACAL,MAAAA,QAAQ,CAACvC,aAAa,CAACiC,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAd,CAAR;AACAL,MAAAA,QAAQ,CAACtC,WAAW,CAACgC,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAZ,CAAR;AAEAL,MAAAA,QAAQ,CAACrC,gBAAgB,CAAC+B,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAjB,CAAR;AACAL,MAAAA,QAAQ,CAACpC,aAAa,CAAC8B,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAd,CAAR;AACAL,MAAAA,QAAQ,CAACnC,YAAY,CAAC6B,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAb,CAAR;AACAL,MAAAA,QAAQ,CAAClC,QAAQ,CAAC4B,KAAK,CAACgB,IAAP,EAAad,WAAW,CAACQ,IAAZ,CAAiBC,GAA9B,CAAT,CAAR;AACD;AACF,GA5BD,EA4BG,CAACT,WAAD,CA5BH;AA8BA9C,EAAAA,KAAK,CAAC6D,SAAN,CAAgB,YAAM;AACpB,QAAIjB,KAAK,CAACgB,IAAV,EAAgB;AACd,UAAI,CAACd,WAAL,EAAkB;AAChBI,QAAAA,QAAQ,CAAC5C,WAAW,CAACsC,KAAK,CAACgB,IAAP,CAAZ,CAAR;AACAV,QAAAA,QAAQ,CAAC1C,mBAAmB,CAACoC,KAAK,CAACgB,IAAP,CAApB,CAAR;AACD;;AACD,UAAId,WAAJ,EAAiB;AACf,YAAIE,SAAS,CAACc,OAAd,EAAuBd,SAAS,CAACc,OAAV,CAAkBC,UAAlB;AACvBf,QAAAA,SAAS,CAACc,OAAV,GAAoBvB,EAAE,CAACyB,OAAH,CAAWvB,QAAX,CAApB;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,YAAMQ,MAAM,GAAGjB,SAAS,CAACc,OAAzB;AACAN,QAAAA,OAAO,CAACC,GAAR,CACE,gDADF,EAEEX,WAAW,CAACQ,IAAZ,CAAiBC,GAFnB;AAKAU,QAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,YAAY;AAC/BV,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAQ,UAAAA,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqBvB,KAAK,CAACgB,IAAN,CAAWQ,WAAhC;AACD,SAHD;AAKAH,QAAAA,MAAM,CAACC,EAAP,CAAU,gBAAV,EAA4B,UAAUG,IAAV,EAAgB;AAC1ClB,UAAAA,aAAa,CAACkB,IAAI,CAACf,IAAN,EAAY5B,kBAAkB,CAAC2C,IAAD,CAA9B,CAAb;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAHD;AAIAQ,QAAAA,MAAM,CAACC,EAAP,CAAU,aAAV,EAAyB,UAAUG,IAAV,EAAgB;AACvClB,UAAAA,aAAa,CAACkB,IAAI,CAACf,IAAN,EAAYvB,oBAAoB,CAACsC,IAAD,CAAhC,CAAb;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,SAHD;AAKAQ,QAAAA,MAAM,CAACC,EAAP,CAAU,WAAV,EAAuB,UAAUG,IAAV,EAAgB;AACrClB,UAAAA,aAAa,CAACkB,IAAI,CAACf,IAAN,EAAY3B,qBAAqB,CAAC0C,IAAD,CAAjC,CAAb;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,SAHD;AAIAQ,QAAAA,MAAM,CAACC,EAAP,CAAU,KAAV,EAAiB,UAAUG,IAAV,EAAgB;AAC/Bb,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCY,IAApC;AACD,SAFD;AAIAJ,QAAAA,MAAM,CAACC,EAAP,CAAU,WAAV,EAAuB,UAAUG,IAAV,EAAgB;AACrClB,UAAAA,aAAa,CAACkB,IAAI,CAACf,IAAN,EAAY7B,kBAAkB,CAAC4C,IAAD,CAA9B,CAAb;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAHD;AAKAQ,QAAAA,MAAM,CAACC,EAAP,CAAU,cAAV,EAA0B,UAAUG,IAAV,EAAgB;AACxC,cAAIA,IAAI,CAACC,OAAL,IAAgB,KAApB,EAA2B;AACzBpB,YAAAA,QAAQ,CAACrB,gBAAgB,CAACwC,IAAI,CAACA,IAAN,CAAjB,CAAR;AACD;;AACD,cAAIA,IAAI,CAACC,OAAL,IAAgB,QAApB,EAA8B;AAC5BpB,YAAAA,QAAQ,CAACpB,kBAAkB,CAACuC,IAAI,CAACA,IAAL,CAAUd,GAAX,EAAgBc,IAAI,CAACA,IAArB,CAAnB,CAAR;AACD;;AACDb,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,SARD;AAmHAQ,QAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAwB,YAAY,CAAE,CAAtC;AACD;AACF,KA/JD,MA+JO;AACLV,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAIT,SAAS,CAACc,OAAd,EAAuBd,SAAS,CAACc,OAAV,CAAkBC,UAAlB;AACvBf,MAAAA,SAAS,CAACc,OAAV,GAAoB,IAApB;AACD;;AACD,WAAO,YAAM;AACXN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAIT,SAAS,CAACc,OAAd,EAAuBd,SAAS,CAACc,OAAV,CAAkBC,UAAlB;AACvBf,MAAAA,SAAS,CAACc,OAAV,GAAoB,IAApB;AACD,KAJD;AAKD,GA1KD,EA0KG,CAAClB,KAAK,CAACgB,IAAP,EAAad,WAAb,CA1KH;AA2KA,SACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACF,KAAK,CAACgB,IAAP,GAAc,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAd,GAAkC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADrC,CADF;AAKD;;AAED,eAAelB,YAAf","sourcesContent":["import React from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport AuthNavigator from \"./auth.navigator\";\r\nimport MainNavigator from \"./main.navigator\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getRoomList,\r\n  getCurrentRoomInfo,\r\n  getNotificationList,\r\n  getAreaData,\r\n  getCurrentData,\r\n  getSensorData,\r\n  getCubeData,\r\n  getRoomStructure,\r\n  getUserAccess,\r\n  getActivates,\r\n  getAreas,\r\n  getAreaDataFailed,\r\n  getCurrentDataFailed,\r\n  getSensorDataFailed,\r\n  getCubeDataFailed,\r\n  getRoomStructureFailed,\r\n  getUserAccessFailed,\r\n  getActivatesFailed,\r\n  getAreasFailed,\r\n  getAreaDataSuccess,\r\n  getCubeDataSuccess,\r\n  getCurrentDataSuccess,\r\n  updateRoomSuccess,\r\n  pushNotification,\r\n  updateNotification,\r\n  getSensorDataSuccess,\r\n  deleteRoomSuccess,\r\n  addSensorSuccess,\r\n  deleteSensorSuccess,\r\n  updateSensorSuccess,\r\n  updateAccessSuccess,\r\n  AddAccessSuccess,\r\n  deleteAccessSuccess,\r\n} from \"../redux/actions\";\r\nvar io = require(\"socket.io-client\");\r\nconst { BASE_URL } = require(\"../constants/apiConfig\");\r\n\r\nfunction AppNavigator(props) {\r\n  const state = useSelector((state) => state.Auth);\r\n  const currentRoom = useSelector((state) => state.RoomList.currentRoom);\r\n  const webSocket = React.useRef(null);\r\n  const dispatch = useDispatch();\r\n  const checkDispatch = (room_id, action) => {\r\n    if (currentRoom && currentRoom.room._id === room_id) {\r\n      dispatch(action);\r\n      console.log(\"DISPACH\");\r\n    }\r\n  };\r\n\r\n  const checkAnoUserAction = (room_id, actionBy, action) => {\r\n    if (\r\n      currentRoom &&\r\n      currentRoom.room._id === room_id &&\r\n      actionBy != state.user.user._id\r\n    ) {\r\n      dispatch(action);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (currentRoom && state.user && currentRoom.room._id) {\r\n      console.log(currentRoom, \"sad\");\r\n\r\n      dispatch(getAreaDataFailed(null));\r\n      dispatch(getCurrentDataFailed(null));\r\n      dispatch(getSensorDataFailed(null));\r\n      dispatch(getCubeDataFailed(null));\r\n\r\n      dispatch(getRoomStructureFailed(null));\r\n      dispatch(getUserAccessFailed(null));\r\n      dispatch(getActivatesFailed(null));\r\n      dispatch(getAreasFailed(null));\r\n\r\n      //\r\n\r\n      dispatch(getCurrentRoomInfo(state.user, currentRoom.room._id));\r\n\r\n      dispatch(getAreaData(state.user, currentRoom.room._id));\r\n      dispatch(getCurrentData(state.user, currentRoom.room._id));\r\n      dispatch(getSensorData(state.user, currentRoom.room._id));\r\n      dispatch(getCubeData(state.user, currentRoom.room._id));\r\n\r\n      dispatch(getRoomStructure(state.user, currentRoom.room._id));\r\n      dispatch(getUserAccess(state.user, currentRoom.room._id));\r\n      dispatch(getActivates(state.user, currentRoom.room._id));\r\n      dispatch(getAreas(state.user, currentRoom.room._id));\r\n    }\r\n  }, [currentRoom]);\r\n\r\n  React.useEffect(() => {\r\n    if (state.user) {\r\n      if (!currentRoom) {\r\n        dispatch(getRoomList(state.user));\r\n        dispatch(getNotificationList(state.user));\r\n      }\r\n      if (currentRoom) {\r\n        if (webSocket.current) webSocket.current.disconnect();\r\n        webSocket.current = io.connect(BASE_URL);\r\n        console.log(\"Connect\");\r\n        const socket = webSocket.current;\r\n        console.log(\r\n          \"Socket io Client run socket client with room: \",\r\n          currentRoom.room._id\r\n        );\r\n\r\n        socket.on(\"connect\", function () {\r\n          console.log(\"Socket io Client  Connected\");\r\n          socket.emit(\"login\", state.user.accessToken);\r\n        });\r\n\r\n        socket.on(\"data_cube_room\", function (data) {\r\n          checkDispatch(data.room, getCubeDataSuccess(data));\r\n          console.log(\"Socket io Client Cube\");\r\n        });\r\n        socket.on(\"data_sensor\", function (data) {\r\n          checkDispatch(data.room, getSensorDataSuccess(data));\r\n          console.log(\"Socket io Client Sensor\");\r\n        });\r\n\r\n        socket.on(\"data_room\", function (data) {\r\n          checkDispatch(data.room, getCurrentDataSuccess(data));\r\n          console.log(\"Socket io Client Curent Data\");\r\n        });\r\n        socket.on(\"log\", function (data) {\r\n          console.log(\"Socket io Client Log\", data);\r\n        });\r\n\r\n        socket.on(\"data_area\", function (data) {\r\n          checkDispatch(data.room, getAreaDataSuccess(data));\r\n          console.log(\"Socket io Client Area\");\r\n        });\r\n\r\n        socket.on(\"notification\", function (data) {\r\n          if (data.message == \"add\") {\r\n            dispatch(pushNotification(data.data));\r\n          }\r\n          if (data.message == \"update\") {\r\n            dispatch(updateNotification(data.data._id, data.data));\r\n          }\r\n          console.log(\"Socket io Client Notification\");\r\n        });\r\n\r\n        /* socket.on(\"access\", function (data) {\r\n          console.log(data);\r\n          if (data.message == \"accepted\") {\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              updateAccessSuccess(data.data.access)\r\n            );\r\n          }\r\n          if (data.message == \"invite\") {\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              AddAccessSuccess(data.data.access)\r\n            );\r\n          }\r\n          if (data.message == \"add\") {\r\n            if (\r\n              state.user &&\r\n              data.data.access.user &&\r\n              data.data.access.user._id === state.user.user._id\r\n            ) {\r\n              socket.emit(\"join-room\", \"room\" + data.data.room._id);\r\n              dispatch(getRoomList(state.user));\r\n            }\r\n          }\r\n          if (data.message == \"edit\") {\r\n            if (\r\n              state.user &&\r\n              data.data.access.user &&\r\n              data.data.access.user._id !== state.user.user._id\r\n            ) {\r\n              checkAnoUserAction(\r\n                data.data.room._id,\r\n                data.data.actionBy,\r\n                updateAccessSuccess(data.data.access)\r\n              );\r\n            } else {\r\n              dispatch(getRoomList(state.user));\r\n            }\r\n          }\r\n          if (data.message == \"delete\") {\r\n            if (\r\n              state.user &&\r\n              data.data.access.user &&\r\n              data.data.access.user._id !== state.user.user._id\r\n            ) {\r\n              checkAnoUserAction(\r\n                data.data.room._id,\r\n                data.data.actionBy,\r\n                deleteAccessSuccess(data.data.access._id)\r\n              );\r\n            } else {\r\n              socket.emit(\"leave-room\", \"room\" + data.data.room._id);\r\n              dispatch(getRoomList(state.user));\r\n            }\r\n          }\r\n          console.log(\"Socket io Client Access \", data);\r\n        });\r\n\r\n        socket.on(\"room\", function (data) {\r\n          if (data.message == \"edit\") {\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              updateRoomSuccess(data.data.room)\r\n            );\r\n          }\r\n          if (data.message == \"delete\") {\r\n            socket.emit(\"leave-room\", \"room\" + data.data.room._id);\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              deleteRoomSuccess(data.data.room._id)\r\n            );\r\n          }\r\n\r\n          console.log(\"Socket io Room Info \", data);\r\n        });\r\n\r\n        socket.on(\"structure\", function (data) {\r\n          if (data.message == \"add\") {\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              addSensorSuccess(data.data.structure)\r\n            );\r\n          }\r\n          if (data.message == \"update\") {\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              updateSensorSuccess(data.data.structure)\r\n            );\r\n          }\r\n          if (data.message == \"delete\") {\r\n            checkAnoUserAction(\r\n              data.data.room._id,\r\n              data.data.actionBy,\r\n              deleteSensorSuccess(data.data.structure)\r\n            );\r\n          }\r\n          console.log(\"Socket io Client Structure \", data);\r\n        }); */\r\n\r\n        socket.on(\"disconnect\", function () {});\r\n      }\r\n    } else {\r\n      console.log(\"Disconnect\");\r\n      if (webSocket.current) webSocket.current.disconnect();\r\n      webSocket.current = null;\r\n    }\r\n    return () => {\r\n      console.log(\"Disconnect\");\r\n      if (webSocket.current) webSocket.current.disconnect();\r\n      webSocket.current = null;\r\n    };\r\n  }, [state.user, currentRoom]);\r\n  return (\r\n    <NavigationContainer>\r\n      {!state.user ? <AuthNavigator /> : <MainNavigator />}\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default AppNavigator;\r\n"]},"metadata":{},"sourceType":"module"}