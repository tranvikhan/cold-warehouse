{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(getCurrentRoomSensorMap),\n    _marked2 = _regeneratorRuntime.mark(updateSensor),\n    _marked3 = _regeneratorRuntime.mark(addSensor),\n    _marked4 = _regeneratorRuntime.mark(deleteSensor),\n    _marked5 = _regeneratorRuntime.mark(watchGetCurrentRoomSensorMap),\n    _marked6 = _regeneratorRuntime.mark(watchUpdateSensor),\n    _marked7 = _regeneratorRuntime.mark(watchAddeSensor),\n    _marked8 = _regeneratorRuntime.mark(watchDeleteSensor),\n    _marked9 = _regeneratorRuntime.mark(roomStructrureSaga);\n\nimport { all, call, fork, takeEvery, put } from 'redux-saga/effects';\nimport { ADD_SENSOR, GET_CURR_ROOM_SENSOR_MAP, UPDATE_SENSOR, DELETE_SENSOR } from \"./constants\";\nimport { addSensorFailed, addSensorSuccess, deleteSensorFailed, deleteSensorSuccess, getRoomStructureFailed, getRoomStructureSuccess, updateSensorFailed, updateSensorSuccess } from \"./actions\";\nimport { requestApi } from 'helpers/api';\n\nfunction getCurrentRoomSensorMap(_ref) {\n  var _ref$payload, room_id, user, res;\n\n  return _regeneratorRuntime.wrap(function getCurrentRoomSensorMap$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, room_id = _ref$payload.room_id, user = _ref$payload.user;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(requestApi, {\n            method: 'get',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/structure/',\n            params: {\n              room_id: room_id\n            }\n          });\n\n        case 4:\n          res = _context.sent;\n\n          if (!(res.status === 'success')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(getRoomStructureSuccess(res.result.structure));\n\n        case 8:\n          _context.next = 12;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return put(getRoomStructureFailed(res.result));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 18;\n          return put(getRoomStructureFailed(_context.t0));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 14]]);\n}\n\nfunction updateSensor(_ref2) {\n  var _ref2$payload, user, room_id, sensor_id, location, res;\n\n  return _regeneratorRuntime.wrap(function updateSensor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, user = _ref2$payload.user, room_id = _ref2$payload.room_id, sensor_id = _ref2$payload.sensor_id, location = _ref2$payload.location;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(requestApi, {\n            method: 'post',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/structure/sensor/edit',\n            data: {\n              room_id: room_id,\n              sensor_id: sensor_id,\n              location: location\n            }\n          });\n\n        case 4:\n          res = _context2.sent;\n\n          if (!(res.status === 'success')) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 8;\n          return put(updateSensorSuccess(res.result.structure));\n\n        case 8:\n          _context2.next = 12;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return put(updateSensorFailed(res.result));\n\n        case 12:\n          _context2.next = 18;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 18;\n          return put(updateSensorFailed(_context2.t0));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 14]]);\n}\n\nfunction addSensor(_ref3) {\n  var _ref3$payload, user, room_id, sensor_id, location, res;\n\n  return _regeneratorRuntime.wrap(function addSensor$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, user = _ref3$payload.user, room_id = _ref3$payload.room_id, sensor_id = _ref3$payload.sensor_id, location = _ref3$payload.location;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(requestApi, {\n            method: 'post',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/structure/sensor/add',\n            data: {\n              room_id: room_id,\n              sensor_id: sensor_id,\n              location: location\n            }\n          });\n\n        case 4:\n          res = _context3.sent;\n\n          if (!(res.status === 'success')) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 8;\n          return put(addSensorSuccess(res.result.structure));\n\n        case 8:\n          _context3.next = 12;\n          break;\n\n        case 10:\n          _context3.next = 12;\n          return put(addSensorFailed(res.result));\n\n        case 12:\n          _context3.next = 18;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 18;\n          return put(addSensorFailed(_context3.t0));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 14]]);\n}\n\nfunction deleteSensor(_ref4) {\n  var _ref4$payload, user, room_id, sensor_id, res;\n\n  return _regeneratorRuntime.wrap(function deleteSensor$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, user = _ref4$payload.user, room_id = _ref4$payload.room_id, sensor_id = _ref4$payload.sensor_id;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(requestApi, {\n            method: 'post',\n            headers: {\n              'x-access-token': user.accessToken\n            },\n            url: 'api/room/structure/sensor/delete',\n            data: {\n              room_id: room_id,\n              sensor_id: sensor_id\n            }\n          });\n\n        case 4:\n          res = _context4.sent;\n\n          if (!(res.status === 'success')) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(deleteSensorSuccess(res.result.structure));\n\n        case 8:\n          _context4.next = 12;\n          break;\n\n        case 10:\n          _context4.next = 12;\n          return put(deleteSensorFailed(res.result));\n\n        case 12:\n          _context4.next = 18;\n          break;\n\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 18;\n          return put(deleteSensorFailed(_context4.t0));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 14]]);\n}\n\nfunction watchGetCurrentRoomSensorMap() {\n  return _regeneratorRuntime.wrap(function watchGetCurrentRoomSensorMap$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(GET_CURR_ROOM_SENSOR_MAP, getCurrentRoomSensorMap);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchUpdateSensor() {\n  return _regeneratorRuntime.wrap(function watchUpdateSensor$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(UPDATE_SENSOR, updateSensor);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddeSensor() {\n  return _regeneratorRuntime.wrap(function watchAddeSensor$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(ADD_SENSOR, addSensor);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchDeleteSensor() {\n  return _regeneratorRuntime.wrap(function watchDeleteSensor$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(DELETE_SENSOR, deleteSensor);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction roomStructrureSaga() {\n  return _regeneratorRuntime.wrap(function roomStructrureSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchGetCurrentRoomSensorMap), fork(watchUpdateSensor), fork(watchAddeSensor), fork(watchDeleteSensor)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default roomStructrureSaga;","map":{"version":3,"sources":["D:/GIT HUB/NCKH2020/KHAN/AndroidApp/src/redux/roomStructrure/saga.js"],"names":["getCurrentRoomSensorMap","updateSensor","addSensor","deleteSensor","watchGetCurrentRoomSensorMap","watchUpdateSensor","watchAddeSensor","watchDeleteSensor","roomStructrureSaga","all","call","fork","takeEvery","put","ADD_SENSOR","GET_CURR_ROOM_SENSOR_MAP","UPDATE_SENSOR","DELETE_SENSOR","addSensorFailed","addSensorSuccess","deleteSensorFailed","deleteSensorSuccess","getRoomStructureFailed","getRoomStructureSuccess","updateSensorFailed","updateSensorSuccess","requestApi","payload","room_id","user","method","headers","accessToken","url","params","res","status","result","structure","sensor_id","location","data"],"mappings":"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","sourcesContent":["import { all, call, fork, takeEvery, put } from 'redux-saga/effects';\r\n\r\nimport {\r\n    ADD_SENSOR,\r\n    GET_CURR_ROOM_SENSOR_MAP,\r\n    UPDATE_SENSOR,\r\n    DELETE_SENSOR\r\n} from './constants';\r\n\r\nimport { addSensorFailed, addSensorSuccess, deleteSensorFailed, deleteSensorSuccess, getRoomStructureFailed, getRoomStructureSuccess, updateSensorFailed, updateSensorSuccess } from './actions';\r\n\r\nimport {requestApi} from 'helpers/api';\r\n\r\n\r\nfunction * getCurrentRoomSensorMap({payload: {room_id, user}}){\r\n    try{\r\n        const res = yield call(requestApi, {\r\n            method: 'get',\r\n            headers: {\r\n                'x-access-token': user.accessToken,\r\n            },\r\n            url:'api/room/structure/',\r\n            params:{room_id}\r\n        });\r\n        if (res.status==='success'){\r\n            yield put(getRoomStructureSuccess(res.result.structure));\r\n        } else {\r\n            yield put(getRoomStructureFailed(res.result));\r\n        }\r\n    } catch (error){\r\n        yield put(getRoomStructureFailed(error))\r\n    }\r\n}\r\n\r\nfunction * updateSensor({payload: {user,room_id,sensor_id,location}}){\r\n    try{\r\n        const res = yield call(requestApi, {\r\n            method: 'post',\r\n            headers: {\r\n                'x-access-token': user.accessToken,\r\n            },\r\n            url:'api/room/structure/sensor/edit',\r\n            data:{room_id,sensor_id,location:location}\r\n        });\r\n\r\n        if (res.status==='success'){\r\n            yield put(updateSensorSuccess(res.result.structure));\r\n        } else {\r\n            yield put(updateSensorFailed(res.result));\r\n        }\r\n    } catch (error){\r\n        yield put(updateSensorFailed(error))\r\n    }\r\n}\r\n\r\nfunction * addSensor({payload: {user,room_id,sensor_id,location}}){\r\n    try{\r\n        const res = yield call(requestApi, {\r\n            method: 'post',\r\n            headers: {\r\n                'x-access-token': user.accessToken,\r\n            },\r\n            url:'api/room/structure/sensor/add',\r\n            data:{room_id,sensor_id,location:location}\r\n        });\r\n\r\n        if (res.status==='success'){\r\n            yield put(addSensorSuccess(res.result.structure));\r\n        } else {\r\n            yield put(addSensorFailed(res.result));\r\n        }\r\n    } catch (error){\r\n        yield put(addSensorFailed(error))\r\n    }\r\n}\r\n\r\nfunction * deleteSensor({payload: {user,room_id,sensor_id}}){\r\n    try{\r\n        const res = yield call(requestApi, {\r\n            method: 'post',\r\n            headers: {\r\n                'x-access-token': user.accessToken,\r\n            },\r\n            url:'api/room/structure/sensor/delete',\r\n            data:{room_id,sensor_id}\r\n        });\r\n\r\n        if (res.status==='success'){\r\n            yield put(deleteSensorSuccess(res.result.structure));\r\n        } else {\r\n            yield put(deleteSensorFailed(res.result));\r\n        }\r\n    } catch (error){\r\n        yield put(deleteSensorFailed(error))\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction * watchGetCurrentRoomSensorMap(){\r\n    yield takeEvery(GET_CURR_ROOM_SENSOR_MAP, getCurrentRoomSensorMap);\r\n}\r\n\r\nfunction * watchUpdateSensor(){\r\n    yield takeEvery(UPDATE_SENSOR, updateSensor);\r\n}\r\n\r\nfunction * watchAddeSensor(){\r\n    yield takeEvery(ADD_SENSOR, addSensor);\r\n}\r\n\r\nfunction * watchDeleteSensor(){\r\n    yield takeEvery(DELETE_SENSOR, deleteSensor);\r\n}\r\n\r\nfunction* roomStructrureSaga(){\r\n    yield all([\r\n\r\n        fork(watchGetCurrentRoomSensorMap),\r\n        fork(watchUpdateSensor),\r\n        fork(watchAddeSensor),\r\n        fork(watchDeleteSensor),\r\n       \r\n    ])\r\n}\r\n\r\nexport default roomStructrureSaga;"]},"metadata":{},"sourceType":"module"}