{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\ReactNative\\\\myapp\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { View as GraphicsView } from \"expo-graphics\";\nimport ExpoTHREE, { THREE } from \"expo-three\";\nimport React from \"react\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onContextCreate = function _callee(_ref) {\n      var gl, canvas, width, height, pixelRatio, geometry, material, light;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              gl = _ref.gl, canvas = _ref.canvas, width = _ref.width, height = _ref.height, pixelRatio = _ref.scale;\n              _this.renderer = new ExpoTHREE.Renderer({\n                gl: gl,\n                pixelRatio: pixelRatio,\n                width: width,\n                height: height\n              });\n\n              _this.renderer.setClearColor(0xffffff);\n\n              _this.scene = new THREE.Scene();\n              _this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n              _this.camera.position.z = 5;\n              geometry = new THREE.BoxGeometry(1, 1, 1);\n              material = new THREE.MeshPhongMaterial({\n                color: 0xff0000\n              });\n              _this.cube = new THREE.Mesh(geometry, material);\n\n              _this.scene.add(_this.cube);\n\n              _this.scene.add(new THREE.AmbientLight(0x404040));\n\n              light = new THREE.DirectionalLight(0xffffff, 0.5);\n              light.position.set(3, 3, 3);\n\n              _this.scene.add(light);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onRender = function (delta) {\n      _this.cube.rotation.x += 3.5 * delta;\n      _this.cube.rotation.y += 2 * delta;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      THREE.suppressExpoWarnings();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GraphicsView, {\n        onContextCreate: this.onContextCreate,\n        onRender: this.onRender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["D:/ReactNative/myapp/App.js"],"names":["View","GraphicsView","ExpoTHREE","THREE","React","App","onContextCreate","gl","canvas","width","height","pixelRatio","scale","renderer","Renderer","setClearColor","scene","Scene","camera","PerspectiveCamera","position","z","geometry","BoxGeometry","material","MeshPhongMaterial","color","cube","Mesh","add","AmbientLight","light","DirectionalLight","set","onRender","delta","rotation","x","y","render","suppressExpoWarnings","Component"],"mappings":";;;;;;;;;;;;AAAA,SAASA,IAAI,IAAIC,YAAjB,QAAqC,eAArC;AACA,OAAOC,SAAP,IAAoBC,KAApB,QAAiC,YAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,G;;;;;;;;;;;;;;;;UAiBnBC,e,GAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,cAAAA,EADgB,QAChBA,EADgB,EAEhBC,MAFgB,QAEhBA,MAFgB,EAGhBC,KAHgB,QAGhBA,KAHgB,EAIhBC,MAJgB,QAIhBA,MAJgB,EAKTC,UALS,QAKhBC,KALgB;AAOhB,oBAAKC,QAAL,GAAgB,IAAIX,SAAS,CAACY,QAAd,CAAuB;AAAEP,gBAAAA,EAAE,EAAFA,EAAF;AAAMI,gBAAAA,UAAU,EAAVA,UAAN;AAAkBF,gBAAAA,KAAK,EAALA,KAAlB;AAAyBC,gBAAAA,MAAM,EAANA;AAAzB,eAAvB,CAAhB;;AACA,oBAAKG,QAAL,CAAcE,aAAd,CAA4B,QAA5B;;AACA,oBAAKC,KAAL,GAAa,IAAIb,KAAK,CAACc,KAAV,EAAb;AACA,oBAAKC,MAAL,GAAc,IAAIf,KAAK,CAACgB,iBAAV,CAA4B,EAA5B,EAAgCV,KAAK,GAAGC,MAAxC,EAAgD,GAAhD,EAAqD,IAArD,CAAd;AACA,oBAAKQ,MAAL,CAAYE,QAAZ,CAAqBC,CAArB,GAAyB,CAAzB;AACMC,cAAAA,QAZU,GAYC,IAAInB,KAAK,CAACoB,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAZD;AAcVC,cAAAA,QAdU,GAcC,IAAIrB,KAAK,CAACsB,iBAAV,CAA4B;AAC3CC,gBAAAA,KAAK,EAAE;AADoC,eAA5B,CAdD;AAkBhB,oBAAKC,IAAL,GAAY,IAAIxB,KAAK,CAACyB,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAAZ;;AACA,oBAAKR,KAAL,CAAWa,GAAX,CAAe,MAAKF,IAApB;;AAEA,oBAAKX,KAAL,CAAWa,GAAX,CAAe,IAAI1B,KAAK,CAAC2B,YAAV,CAAuB,QAAvB,CAAf;;AAEMC,cAAAA,KAvBU,GAuBF,IAAI5B,KAAK,CAAC6B,gBAAV,CAA2B,QAA3B,EAAqC,GAArC,CAvBE;AAwBhBD,cAAAA,KAAK,CAACX,QAAN,CAAea,GAAf,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;;AACA,oBAAKjB,KAAL,CAAWa,GAAX,CAAeE,KAAf;;AAzBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UA4BlBG,Q,GAAW,UAACC,KAAD,EAAW;AACpB,YAAKR,IAAL,CAAUS,QAAV,CAAmBC,CAAnB,IAAwB,MAAMF,KAA9B;AACA,YAAKR,IAAL,CAAUS,QAAV,CAAmBE,CAAnB,IAAwB,IAAIH,KAA5B;;AACA,YAAKtB,QAAL,CAAc0B,MAAd,CAAqB,MAAKvB,KAA1B,EAAiC,MAAKE,MAAtC;AACD,K;;;;;;;yCAhDoB;AACnBf,MAAAA,KAAK,CAACqC,oBAAN;AACD;;;6BAEQ;AAGP,aACE,oBAAC,YAAD;AACE,QAAA,eAAe,EAAE,KAAKlC,eADxB;AAEE,QAAA,QAAQ,EAAE,KAAK4B,QAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;;;EAd8B9B,KAAK,CAACqC,S;;SAAlBpC,G","sourcesContent":["import { View as GraphicsView } from \"expo-graphics\";\nimport ExpoTHREE, { THREE } from \"expo-three\";\nimport React from \"react\";\n\nexport default class App extends React.Component {\n  componentWillMount() {\n    THREE.suppressExpoWarnings();\n  }\n\n  render() {\n    // Create an `ExpoGraphics.View` covering the whole screen, tell it to call our\n    // `onContextCreate` function once it's initialized.\n    return (\n      <GraphicsView\n        onContextCreate={this.onContextCreate}\n        onRender={this.onRender}\n      />\n    );\n  }\n\n  // This is called by the `ExpoGraphics.View` once it's initialized\n  onContextCreate = async ({\n    gl,\n    canvas,\n    width,\n    height,\n    scale: pixelRatio,\n  }) => {\n    this.renderer = new ExpoTHREE.Renderer({ gl, pixelRatio, width, height });\n    this.renderer.setClearColor(0xffffff);\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 5;\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xff0000,\n    });\n\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    this.scene.add(new THREE.AmbientLight(0x404040));\n\n    const light = new THREE.DirectionalLight(0xffffff, 0.5);\n    light.position.set(3, 3, 3);\n    this.scene.add(light);\n  };\n\n  onRender = (delta) => {\n    this.cube.rotation.x += 3.5 * delta;\n    this.cube.rotation.y += 2 * delta;\n    this.renderer.render(this.scene, this.camera);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}