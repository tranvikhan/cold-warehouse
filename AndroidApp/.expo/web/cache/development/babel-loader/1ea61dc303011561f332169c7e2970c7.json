{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport default function useDimensions() {\n  var _React$useState = React.useState({\n    window: Dimensions.get('window'),\n    screen: Dimensions.get('screen')\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  var onChange = function onChange(_ref) {\n    var window = _ref.window,\n        screen = _ref.screen;\n    setDimensions({\n      window: window,\n      screen: screen\n    });\n  };\n\n  React.useEffect(function () {\n    Dimensions.addEventListener('change', onChange);\n    return function () {\n      return Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}\n;","map":{"version":3,"sources":["../../src/hooks/useDimensions.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;AAKA,eAAc,SAAU,aAAV,GAAuB;AAAA,wBACC,KAAK,CAAC,QAAN,CAA+B;AACjE,IAAA,MAAM,EAAE,UAAU,CAAC,GAAX,CAAe,QAAf,CADyD;AAEjE,IAAA,MAAM,EAAE,UAAU,CAAC,GAAX,CAAe,QAAf;AAFyD,GAA/B,CADD;AAAA;AAAA,MAC5B,UAD4B;AAAA,MAChB,aADgB;;AAMnC,MAAM,QAAQ,GAAG,SAAX,QAAW,OAAuB;AAAA,QAApB,MAAoB,QAApB,MAAoB;AAAA,QAAZ,MAAY,QAAZ,MAAY;AACtC,IAAA,aAAa,CAAC;AAAE,MAAA,MAAM,EAAN,MAAF;AAAU,MAAA,MAAM,EAAN;AAAV,KAAD,CAAb;AACD,GAFD;;AAIA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAK;AACnB,IAAA,UAAU,CAAC,gBAAX,CAA4B,QAA5B,EAAsC,QAAtC;AAEA,WAAO;AAAA,aAAM,UAAU,CAAC,mBAAX,CAA+B,QAA/B,EAAyC,QAAzC,CAAN;AAAA,KAAP;AACD,GAJD,EAIG,EAJH;AAMA,SAAO,UAAP;AACD;AAAA","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\ntype DimensionsType = { window: ScaledSize, screen: ScaledSize };\n\nexport default function useDimensions(): DimensionsType {\n  const [dimensions, setDimensions] = React.useState<DimensionsType>({\n    window: Dimensions.get('window'),\n    screen: Dimensions.get('screen'),\n  });\n\n  const onChange = ({ window, screen }) => {\n    setDimensions({ window, screen });\n  };\n\n  React.useEffect(() => {\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}